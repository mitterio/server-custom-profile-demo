"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var SavedDeliveryEndpoints = /** @class */ (function () {
    function SavedDeliveryEndpoints(deliveryEndpoints) {
        if (deliveryEndpoints === void 0) { deliveryEndpoints = {}; }
        this.deliveryEndpoints = deliveryEndpoints;
    }
    return SavedDeliveryEndpoints;
}());
var MessagingPipelineDriverHost = /** @class */ (function () {
    function MessagingPipelineDriverHost(pipelineDrivers, mitterContext, kvStore, onAllPipelinesInitialized) {
        if (kvStore === void 0) { kvStore = undefined; }
        if (onAllPipelinesInitialized === void 0) { onAllPipelinesInitialized = function () { }; }
        var _this = this;
        this.mitterContext = mitterContext;
        this.kvStore = kvStore;
        this.onAllPipelinesInitialized = onAllPipelinesInitialized;
        this.savedDeliveryEndpoints = new SavedDeliveryEndpoints();
        this.subscriptions = [];
        if (pipelineDrivers instanceof Array) {
            this.pipelineDrivers = pipelineDrivers;
        }
        else {
            this.pipelineDrivers = [pipelineDrivers];
        }
        this.mitterContext.userAuthorizationAvailable(function () { return _this.refresh(); });
    }
    MessagingPipelineDriverHost.prototype.subscribe = function (messageSink) {
        this.subscriptions.push(messageSink);
    };
    MessagingPipelineDriverHost.prototype.refresh = function () {
        var _this = this;
        this.loadStoredEndpoints().then(function () {
            return _this.initializeMessagingPipelines()
                .then(function () {
                _this.onAllPipelinesInitialized();
            })
                .catch(function (e) {
                _this.onAllPipelinesInitialized(e);
            });
        });
    };
    MessagingPipelineDriverHost.prototype.loadStoredEndpoints = function () {
        return __awaiter(this, void 0, void 0, function () {
            var savedDeliveryEndpoints;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.savedDeliveryEndpoints = new SavedDeliveryEndpoints();
                        if (this.kvStore === undefined) {
                            console.warn('You are not using a store for persisting delivery endpoints.' +
                                ' This might cause your users to very quickly hit provisioning limits on their endpoints');
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.kvStore.getItem(MessagingPipelineDriverHost.StoreKeys.SavedDeliveryEndpoints)];
                    case 1:
                        savedDeliveryEndpoints = _a.sent();
                        if (savedDeliveryEndpoints !== undefined) {
                            this.savedDeliveryEndpoints = savedDeliveryEndpoints;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MessagingPipelineDriverHost.prototype.initializeMessagingPipelines = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pipelineInits;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pipelineInits = [];
                        return [4 /*yield*/, this.pipelineDrivers.forEach(function (driver) { return __awaiter(_this, void 0, void 0, function () {
                                var driverInitialized, driverSpec, _a, initialized, pipelineDriverSpec, ex_1, preProvisionPromise;
                                var _this = this;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 3]);
                                            return [4 /*yield*/, driver.initialize(this.mitterContext)];
                                        case 1:
                                            _a = _b.sent(), initialized = _a.initialized, pipelineDriverSpec = _a.pipelineDriverSpec;
                                            driverInitialized = initialized;
                                            pipelineInits.push(driverInitialized);
                                            driverSpec = pipelineDriverSpec;
                                            return [3 /*break*/, 3];
                                        case 2:
                                            ex_1 = _b.sent();
                                            console.log('Unable to initialize pipeline driver', ex_1);
                                            throw ex_1;
                                        case 3:
                                            console.log("Initializing pipeline driver '" + driverSpec.name + "'");
                                            preProvisionPromise = Promise.resolve(undefined);
                                            if (driverSpec.name in this.savedDeliveryEndpoints.deliveryEndpoints) {
                                                preProvisionPromise = this.syncEndpoint(this.savedDeliveryEndpoints.deliveryEndpoints[driverSpec.name]);
                                                console.log("Found an endpoint already present for " + driverSpec.name + ". If invalid, it will be re-provisioned");
                                            }
                                            preProvisionPromise.then(function (syncedEndpoint) {
                                                var operatingEndpoint;
                                                if (syncedEndpoint === undefined) {
                                                    console.log('The endpoint on sync was determined to be invalid, refreshing');
                                                    operatingEndpoint = driverInitialized
                                                        .then(function () { return driver.getDeliveryEndpoint(); })
                                                        .then(function (deliveryEndpoint) {
                                                        if (deliveryEndpoint !== undefined) {
                                                            _this.registerEndpoint(driverSpec, deliveryEndpoint).then(function (provisionedEndpoint) { return provisionedEndpoint; });
                                                        }
                                                        else {
                                                            return undefined;
                                                        }
                                                    })
                                                        .catch(function (e) {
                                                        console.warn("Could not instantiate pipeline driver " + driverSpec.name, e);
                                                        throw e;
                                                    });
                                                }
                                                else {
                                                    console.log('The endpoint on sync was determined to be valid. Continuing with the same');
                                                    operatingEndpoint = Promise.resolve(syncedEndpoint);
                                                }
                                                operatingEndpoint.then(function (endpoint) {
                                                    if (endpoint !== undefined) {
                                                        _this.announceSinkForDriver(driver, endpoint, _this.generatePipelineSink(driverSpec));
                                                    }
                                                    else {
                                                        if (driver.pipelineSinkChanged !== undefined) {
                                                            driver.pipelineSinkChanged(_this.generateStatelessPipelineSink(driverSpec));
                                                        }
                                                    }
                                                });
                                            });
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, Promise.all(pipelineInits)];
                }
            });
        });
    };
    MessagingPipelineDriverHost.prototype.announceSinkForDriver = function (driver, endpoint, pipelineSink) {
        driver.endpointRegistered(pipelineSink, endpoint);
        if (driver.pipelineSinkChanged !== undefined) {
            driver.pipelineSinkChanged(pipelineSink);
        }
    };
    MessagingPipelineDriverHost.prototype.syncEndpoint = function (deliveryEndpoint) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, fetch(this.mitterContext.mitterApiBaseUrl + "/v1/users/me/delivery-endpoints/" + deliveryEndpoint.serializedEndpoint)
                        .then(function (resp) {
                        return resp.json;
                    })
                        .then(function (resp) {
                        return resp;
                    })
                        .catch(function () {
                        return undefined;
                    })];
            });
        });
    };
    MessagingPipelineDriverHost.prototype.registerEndpoint = function (driverSpec, deliveryEndpoint) {
        var _this = this;
        return fetch(this.mitterContext.mitterApiBaseUrl + "/v1/users/me/delivery-endpoints", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(deliveryEndpoint)
        })
            .then(function (response) { return response.json; })
            .then(function (endpoint) {
            var _a;
            _this.savedDeliveryEndpoints = new SavedDeliveryEndpoints(Object.assign({}, _this.savedDeliveryEndpoints.deliveryEndpoints, (_a = {},
                _a[driverSpec.name] = endpoint,
                _a)));
            _this.syncEndpointsToStore();
            console.log('returning endpoint', endpoint);
            return endpoint;
        });
    };
    MessagingPipelineDriverHost.prototype.syncEndpointsToStore = function () {
        if (this.kvStore === undefined) {
            return;
        }
        this.kvStore
            .setItem(MessagingPipelineDriverHost.StoreKeys.SavedDeliveryEndpoints, this.savedDeliveryEndpoints)
            .catch(function (e) { return console.warn('Error syncing delivery endpoints to storage', e); });
    };
    MessagingPipelineDriverHost.prototype.generateStatelessPipelineSink = function (driverSpec) {
        var _this = this;
        return {
            received: function (payload) {
                _this.consumeNewPayload(driverSpec, payload);
            }
        };
    };
    MessagingPipelineDriverHost.prototype.generatePipelineSink = function (driverSpec) {
        var _this = this;
        return {
            received: function (payload) {
                _this.consumeNewPayload(driverSpec, payload);
            },
            endpointInvalidated: function (deliveryEndpoint) {
                _this.invalidateEndpoint(driverSpec, deliveryEndpoint);
            },
            authorizedUserUnavailable: utils_1.noOp,
            statusUpdate: utils_1.noOp
        };
    };
    MessagingPipelineDriverHost.prototype.invalidateEndpoint = function (_, __) {
        throw new Error('');
    };
    MessagingPipelineDriverHost.prototype.consumeNewPayload = function (_, payload) {
        this.subscriptions.forEach(function (subscription) { return subscription(payload); });
    };
    // tslint:disable-next-line:variable-name
    MessagingPipelineDriverHost.StoreKeys = {
        SavedDeliveryEndpoints: 'savedDeliveryEndpoints'
    };
    return MessagingPipelineDriverHost;
}());
exports.MessagingPipelineDriverHost = MessagingPipelineDriverHost;
//# sourceMappingURL=MessagingPipelineDriverHost.js.map