"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("./common");
var constants_1 = require("./constants");
var base = constants_1.MitterConstants.Api.VersionPrefix + "/channels";
exports.ChannelsPaths = {
    GetParticipatedChannelsForMe: constants_1.MitterConstants.Api.VersionPrefix + "/users/me/channels",
    GetParticipatedChannels: constants_1.MitterConstants.Api.VersionPrefix + "/users/:userId/channels",
    GetChannels: "" + base,
    GetChannelsById: base + "/:channelId"
};
exports.channelsClientGenerator = common_1.clientGenerator();
var ChannelsClient = /** @class */ (function () {
    function ChannelsClient(mitterAxiosInterceptionHost) {
        this.mitterAxiosInterceptionHost = mitterAxiosInterceptionHost;
        this.channelsAxiosClient = exports.channelsClientGenerator(mitterAxiosInterceptionHost);
    }
    ChannelsClient.prototype.newChannel = function (channel) {
        return this.channelsAxiosClient
            .post('/v1/channels', channel)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.getAllChannels = function (before, after, limit) {
        if (before === void 0) { before = undefined; }
        if (after === void 0) { after = undefined; }
        if (limit === void 0) { limit = 45; }
        return this.channelsAxiosClient
            .get('/v1/channels', {
            params: Object.assign({}, after !== undefined ? { after: after } : {}, before !== undefined ? { before: before } : {}, limit !== undefined ? { limit: limit } : {})
        })
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.getChannel = function (channelId) {
        return this.channelsAxiosClient
            .get("/v1/channels/" + channelId)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.participatedChannels = function () {
        return this.channelsAxiosClient
            .get('/v1/users/me/channels')
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.deleteChannel = function (channelId) {
        return this.channelsAxiosClient
            .delete("/v1/channels/" + channelId)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.getChannelParticipants = function (channelId) {
        return this.channelsAxiosClient
            .get("/v1/channels/" + channelId + "/participants")
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.addParticipantToChannel = function (channelId, channelParticipation) {
        return this.channelsAxiosClient
            .post("/v1/channels/" + channelId + "/participants", channelParticipation)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.deleteParticipantFromChannel = function (channelId, participantId) {
        return this.channelsAxiosClient
            .delete("/v1/channels/" + channelId + "/participants/" + participantId)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.deleteAllMessages = function (channelId) {
        return this.channelsAxiosClient
            .delete("v1/channels/" + channelId + "/messages")
            .then(function (x) { return x.data; });
    };
    return ChannelsClient;
}());
exports.ChannelsClient = ChannelsClient;
//# sourceMappingURL=ChannelsClient.js.map