"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("./common");
var constants_1 = require("./constants");
var base = constants_1.MitterConstants.Api.VersionPrefix + "/messages";
exports.MessagesPaths = {
    GetMessageById: base + "/:messageId",
    GetMessageInChannel: constants_1.MitterConstants.Api.VersionPrefix + "/channels/:channelId/messages",
    PostMessageToChannel: constants_1.MitterConstants.Api.VersionPrefix + "/channels/:channelId/messages"
};
exports.messagesClientGenerator = common_1.clientGenerator();
var MessagesClient = /** @class */ (function () {
    function MessagesClient(mitterAxiosInterceptionHost) {
        this.mitterAxiosInterceptionHost = mitterAxiosInterceptionHost;
        this.messagesAxiosClient = exports.messagesClientGenerator(mitterAxiosInterceptionHost);
    }
    MessagesClient.prototype.sendMessage = function (channelId, message) {
        return this.messagesAxiosClient
            .post("/v1/channels/" + encodeURIComponent(channelId) + "/messages", message)
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.getMessage = function (messageId) {
        return this.messagesAxiosClient
            .get("/v1/messages/" + messageId)
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.getMessages = function (channelId, before, after, limit) {
        if (before === void 0) { before = undefined; }
        if (after === void 0) { after = undefined; }
        if (limit === void 0) { limit = 45; }
        return this.messagesAxiosClient
            .get("/v1/channels/" + channelId + "/messages", {
            params: Object.assign({}, after !== undefined ? { after: after } : {}, before !== undefined ? { before: before } : {}, limit !== undefined ? { limit: limit } : {})
        })
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.getMessageTimelineEvent = function (channelId, messageIds) {
        return this.messagesAxiosClient
            .get("/v1/channels/" + channelId + "/messages/" + messageIds + "/timeline")
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.addMessageTimelineEvent = function (channelId, messageIds, timelineEvent) {
        return this.messagesAxiosClient
            .post("/v1/channels/" + channelId + "/messages/" + messageIds + "/timeline", timelineEvent)
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.deleteMessages = function (channelId, messageIds) {
        return this.messagesAxiosClient
            .delete("v1/channels/" + channelId + "/messages/" + messageIds)
            .then(function (x) { return x.data; });
    };
    return MessagesClient;
}());
exports.MessagesClient = MessagesClient;
//# sourceMappingURL=MessagesClient.js.map