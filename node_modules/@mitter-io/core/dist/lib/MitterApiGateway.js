"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var MitterAxiosApiInterceptor = /** @class */ (function () {
    function MitterAxiosApiInterceptor(applicationId, genericInterceptor, mitterApiBaseUrl) {
        this.applicationId = applicationId;
        this.genericInterceptor = genericInterceptor;
        this.mitterApiBaseUrl = mitterApiBaseUrl;
        // tslint:disable-next-line:variable-name
        this.mitterAxiosRequestInterceptor = axios_1.default.interceptors.request;
        this.mitterAxiosResponseInterceptor = axios_1.default.interceptors.response;
    }
    MitterAxiosApiInterceptor.prototype.requestInterceptor = function (config) {
        if (this.interceptFilter(config.baseURL)) {
            this.genericInterceptor({
                data: config.data,
                path: config.url,
                headers: config.headers,
                method: config.method
            });
            return config;
        }
        return config;
    };
    MitterAxiosApiInterceptor.prototype.responseInterceptor = function (response) {
        if (this.interceptFilter(response.config.url)) {
            return response;
        }
        else {
            return response;
        }
    };
    MitterAxiosApiInterceptor.prototype.responseErrorInterceptor = function (error) {
        /*
        if (error!!.response!!.status === 401 && error.code === 'claim_rejected') {
            if (this.onTokenExpireExecutor !== undefined) {
                this.onTokenExpireExecutor()
            }
        }
        */
        return Promise.reject(error);
    };
    MitterAxiosApiInterceptor.prototype.enable = function (axiosInstance) {
        var _this = this;
        if (axiosInstance !== undefined) {
            axiosInstance.interceptors.request.use(function (config) {
                return _this.requestInterceptor(config);
            });
            axiosInstance.interceptors.response.use(function (response) { return _this.responseInterceptor(response); }, function (error) { return _this.responseErrorInterceptor(error); });
        }
        else {
            this.mitterAxiosRequestInterceptor.use(function (config) {
                return _this.requestInterceptor(config);
            });
            this.mitterAxiosResponseInterceptor.use(function (response) { return _this.responseInterceptor(response); }, function (error) { return _this.responseErrorInterceptor(error); });
        }
    };
    MitterAxiosApiInterceptor.prototype.disable = function (axiosInstance) {
        if (axiosInstance !== undefined) {
            axiosInstance.interceptors.request.eject(3);
            axiosInstance.interceptors.response.eject(3);
        }
        else {
            this.mitterAxiosRequestInterceptor.eject(1);
            this.mitterAxiosResponseInterceptor.eject(2);
        }
    };
    MitterAxiosApiInterceptor.prototype.interceptFilter = function (url) {
        return url.startsWith(this.mitterApiBaseUrl);
    };
    return MitterAxiosApiInterceptor;
}());
exports.MitterAxiosApiInterceptor = MitterAxiosApiInterceptor;
//# sourceMappingURL=MitterApiGateway.js.map