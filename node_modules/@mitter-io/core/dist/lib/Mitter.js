"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MitterApiGateway_1 = require("./MitterApiGateway");
var MitterClientSet_1 = require("./MitterClientSet");
var MessagingPipelineDriverHost_1 = require("./driver-host/MessagingPipelineDriverHost");
var constants_1 = require("./services/constants");
var user_interceptors_1 = require("./auth/user-interceptors");
var Users_1 = require("./objects/Users");
var utils_1 = require("./utils");
var MitterBase = /** @class */ (function () {
    function MitterBase() {
    }
    MitterBase.prototype.version = function () {
        return '0.5.0';
    };
    MitterBase.prototype.clients = function () {
        return new MitterClientSet_1.MitterClientSet(this);
    };
    return MitterBase;
}());
exports.MitterBase = MitterBase;
var Mitter = /** @class */ (function (_super) {
    __extends(Mitter, _super);
    function Mitter(kvStore, applicationId, mitterApiBaseUrl, onTokenExpireFunctions, mitterInstanceReady, pipelineDrivers, globalHostObject) {
        if (mitterApiBaseUrl === void 0) { mitterApiBaseUrl = constants_1.MitterConstants.MitterApiUrl; }
        var _this = _super.call(this) || this;
        _this.kvStore = kvStore;
        _this.applicationId = applicationId;
        _this.mitterApiBaseUrl = mitterApiBaseUrl;
        _this.onTokenExpireFunctions = onTokenExpireFunctions;
        _this.cachedUserAuthorization = undefined;
        _this.cachedUserId = undefined;
        _this.mitterAxiosInterceptor = new MitterApiGateway_1.MitterAxiosApiInterceptor(
        /* the application if */
        _this.applicationId, 
        /* The generic request interceptor to use */
        new user_interceptors_1.UserAuthorizationInterceptor(function () { return _this.cachedUserAuthorization; }, _this.applicationId).getInterceptor(), 
        /* The base url for mitter apis */
        _this.mitterApiBaseUrl);
        _this.subscriptions = [];
        _this.onAuthAvailableSubscribers = [];
        _this.onPipelinesInitialized = utils_1.statefulPromise();
        _this.messagingPipelineDriverHost = new MessagingPipelineDriverHost_1.MessagingPipelineDriverHost(pipelineDrivers, _this, kvStore, function (e) {
            if (e !== undefined) {
                _this.onPipelinesInitialized.reject(e);
            }
            else {
                _this.onPipelinesInitialized.resolve();
            }
        });
        _this.messagingPipelineDriverHost.subscribe(function (messagingPayload) {
            return _this.subscriptions.forEach(function (subscription) { return subscription(messagingPayload); });
        });
        globalHostObject._mitter_context = _this;
        return _this;
    }
    Mitter.prototype.userAuthorizationAvailable = function (onAuthAvailable) {
        this.onAuthAvailableSubscribers.push(onAuthAvailable);
    };
    Mitter.prototype.subscribeToPayload = function (subscription) {
        this.subscriptions.push(subscription);
    };
    Mitter.prototype.enableAxiosInterceptor = function (axiosInstance) {
        this.mitterAxiosInterceptor.enable(axiosInstance);
    };
    Mitter.prototype.disableAxiosInterceptor = function (axiosInstance) {
        this.mitterAxiosInterceptor.disable(axiosInstance);
    };
    Mitter.prototype.setUserAuthorization = function (authorizationToken) {
        if (authorizationToken.split('.').length === 3) {
            this.cachedUserId = JSON.parse(atob(authorizationToken.split('.')[1]))['userId'];
        }
        if (this.cachedUserAuthorization === authorizationToken) {
            return;
        }
        this.cachedUserAuthorization = authorizationToken;
        this.announceAuthorizationAvailable();
        this.kvStore
            .setItem(Mitter.StoreKey.UserAuthorizationToken, authorizationToken)
            .catch(function (err) {
            throw new Error("Error storing key " + err);
        });
    };
    Mitter.prototype.getUserAuthorization = function () {
        if (this.cachedUserAuthorization !== undefined) {
            return Promise.resolve(this.cachedUserAuthorization);
        }
        else {
            return this.kvStore.getItem(Mitter.StoreKey.UserAuthorizationToken);
        }
    };
    Mitter.prototype.setUserId = function (userId) {
        if (this.cachedUserId === userId)
            return Promise.resolve();
        return this.kvStore.setItem(Mitter.StoreKey.UserId, userId).catch(function (err) {
            throw new Error("Error storing userId " + err);
        });
    };
    Mitter.prototype.getUserId = function () {
        var _this = this;
        if (this.cachedUserId !== undefined) {
            return Promise.resolve(this.cachedUserId);
        }
        else {
            return this.kvStore.getItem(Mitter.StoreKey.UserId).then(function (userId) {
                if (userId === undefined) {
                    return _this._me().userId.then(function (fetchedUserId) {
                        return _this.setUserId(fetchedUserId).then(function () { return fetchedUserId; });
                    });
                }
                else {
                    return Promise.resolve(userId);
                }
            });
        }
    };
    Mitter.prototype.onPipelinesInit = function () {
        return this.onPipelinesInitialized;
    };
    // Smart-object values
    Mitter.prototype.me = function () {
        return {
            identifier: this.cachedUserId
        };
    };
    Mitter.prototype._me = function () {
        return new Users_1.default(this);
    };
    Mitter.prototype.executeOnTokenExpireFunctions = function () {
        this.onTokenExpireFunctions.forEach(function (onTokenExpire) {
            onTokenExpire();
        });
    };
    Mitter.prototype.announceAuthorizationAvailable = function () {
        this.onAuthAvailableSubscribers.forEach(function (subscriber) { return subscriber(); });
    };
    // tslint:disable-next-line:variable-name
    Mitter.StoreKey = {
        UserAuthorizationToken: 'userAuthorizationToken',
        UserId: 'userId'
    };
    return Mitter;
}(MitterBase));
exports.Mitter = Mitter;
//# sourceMappingURL=Mitter.js.map