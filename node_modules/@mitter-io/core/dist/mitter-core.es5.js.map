{"version":3,"file":"mitter-core.es5.js","sources":["../src/MitterApiGateway.ts","../node_modules/restyped-axios/index.ts","../src/services/common.ts","../src/services/constants.ts","../src/services/ChannelsClient.ts","../src/services/MessagesClient.ts","../src/services/UsersClient.ts","../src/services/UserTokensClient.ts","../src/MitterClientSet.ts","../src/utils/response-utils.ts","../src/utils/StatefulPromise.ts","../src/utils/index.ts","../src/driver-host/MessagingPipelineDriverHost.ts","../src/models/named-entities.ts","../src/auth/user-interceptors.ts","../src/objects/mitter-objects.ts","../src/objects/Users.ts","../src/Mitter.ts","../src/specs/MessagingPipelineDriver.ts","../src/models/type-matchers/pipeline-payloads.ts"],"sourcesContent":["import { GenericInterceptor } from './auth/interceptors-base'\nimport axios, {\n    AxiosError,\n    AxiosInstance,\n    AxiosInterceptorManager,\n    AxiosRequestConfig,\n    AxiosResponse\n} from 'axios'\n\nexport class MitterAxiosApiInterceptor {\n    // tslint:disable-next-line:variable-name\n    private mitterAxiosRequestInterceptor: AxiosInterceptorManager<AxiosRequestConfig> =\n        axios.interceptors.request\n    private mitterAxiosResponseInterceptor: AxiosInterceptorManager<AxiosResponse> =\n        axios.interceptors.response\n\n    constructor(\n        private applicationId: string | undefined,\n        private genericInterceptor: GenericInterceptor,\n        private mitterApiBaseUrl: string\n    ) {}\n\n    requestInterceptor(config: AxiosRequestConfig) {\n        if (this.interceptFilter(config!!.baseURL!!)) {\n            this.genericInterceptor({\n                data: config.data,\n                path: config.url!!,\n                headers: config.headers,\n                method: config.method!!\n            })\n\n            return config\n        }\n        return config\n    }\n\n    responseInterceptor(response: AxiosResponse<any>) {\n        if (this.interceptFilter(response!!.config!!.url!!)) {\n            return response\n        } else {\n            return response\n        }\n    }\n\n    responseErrorInterceptor(error: AxiosError) {\n        /*\n        if (error!!.response!!.status === 401 && error.code === 'claim_rejected') {\n            if (this.onTokenExpireExecutor !== undefined) {\n                this.onTokenExpireExecutor()\n            }\n        }\n        */\n\n        return Promise.reject(error)\n    }\n\n    enable(axiosInstance?: AxiosInstance) {\n        if (axiosInstance !== undefined) {\n            axiosInstance.interceptors.request.use((config: AxiosRequestConfig) =>\n                this.requestInterceptor(config)\n            )\n            axiosInstance.interceptors.response.use(\n                (response: AxiosResponse<any>) => this.responseInterceptor(response),\n                (error: AxiosError) => this.responseErrorInterceptor(error)\n            )\n        } else {\n            this.mitterAxiosRequestInterceptor.use((config: AxiosRequestConfig) =>\n                this.requestInterceptor(config)\n            )\n            this.mitterAxiosResponseInterceptor.use(\n                (response: AxiosResponse<any>) => this.responseInterceptor(response),\n                (error: AxiosError) => this.responseErrorInterceptor(error)\n            )\n        }\n    }\n\n    disable(axiosInstance?: AxiosInstance) {\n        if (axiosInstance !== undefined) {\n            axiosInstance.interceptors.request.eject(3)\n            axiosInstance.interceptors.response.eject(3)\n        } else {\n            this.mitterAxiosRequestInterceptor.eject(1)\n            this.mitterAxiosResponseInterceptor.eject(2)\n        }\n    }\n\n    private interceptFilter(url: string): boolean {\n        return url.startsWith(this.mitterApiBaseUrl)\n    }\n}\n",{"errno":-2,"code":"ENOENT","syscall":"open","path":"/builds/mitter-io/mitter-ts-core/node_modules/restyped-axios/index.ts"},"import { AxiosInstance } from 'axios'\nimport { Mitter, MitterAxiosInterceptionHost } from '../Mitter'\nimport axios from 'restyped-axios'\n\nexport function clientGenerator<T>() {\n    return (mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) => {\n        const client = axios.create<T>({\n            baseURL: mitterAxiosInterceptionHost.mitterApiBaseUrl\n        })\n\n        mitterAxiosInterceptionHost.enableAxiosInterceptor(client as AxiosInstance)\n        return client\n    }\n}\n","// tslint:disable-next-line:variable-name\nexport let MitterConstants = {\n    // MitterApiUrl: 'https://api.mitter.io',\n    MitterApiUrl: 'https://api.mitter.io',\n    MitterApiStagingUrl: 'https://api.staging.mitter.io',\n\n    Api: {\n        VersionPrefix: '/v1'\n    }\n}\n","import { TypedAxiosInstance } from 'restyped-axios'\nimport { Identifiable } from '../models/base-types'\nimport { clientGenerator } from './common'\nimport { MitterAxiosInterceptionHost } from '../Mitter'\nimport { MitterConstants } from './constants'\nimport { ParticipatedChannel, Channel, ChannelParticipation } from '@mitter-io/models'\n\nconst base = `${MitterConstants.Api.VersionPrefix}/channels`\n\nexport const ChannelsPaths = {\n    GetParticipatedChannelsForMe: `${MitterConstants.Api.VersionPrefix}/users/me/channels`,\n    GetParticipatedChannels: `${MitterConstants.Api.VersionPrefix}/users/:userId/channels`,\n    GetChannels: `${base}`,\n    GetChannelsById: `${base}/:channelId`\n}\n\nexport interface ChannelsApi {\n    '/v1/users/me/channels': {\n        GET: {\n            response: ParticipatedChannel[]\n        }\n        query: {\n            after?: string\n            before?: string\n            limit?: number\n        }\n    }\n\n    '/v1/users/:userId/channels': {\n        GET: {\n            response: ParticipatedChannel[]\n        }\n    }\n\n    '/v1/channels/:channelId': {\n        GET: {\n            params: {\n                channelId: string\n            }\n            response: Channel\n        }\n\n        DELETE: {\n            params: {\n                channelId: string\n            }\n            response: {}\n        }\n    }\n\n    '/v1/channels': {\n        GET: {\n            response: Channel[]\n        }\n\n        POST: {\n            response: Identifiable<string> | Channel\n            body: Channel\n        }\n    }\n\n    '/v1/channels/:channelId/participants': {\n        GET: {\n            params: {\n                channelId: string\n            }\n        }\n        POST: {\n            params: {\n                channelId: string\n            }\n            response: {}\n        }\n    }\n\n    '/v1/channels/:channelId/participants/:participantId': {\n        DELETE: {\n            params: {\n                channelId: string\n                participantId: string\n            }\n            response: {}\n        }\n    }\n\n    '/v1/channels/:channelId/messages': {\n        DELETE: {\n            params: {\n                channelId: string\n            }\n            response: {}\n        }\n    }\n}\n\nexport const channelsClientGenerator = clientGenerator<ChannelsApi>()\n\nexport class ChannelsClient {\n    private channelsAxiosClient: TypedAxiosInstance<ChannelsApi>\n\n    constructor(private mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) {\n        this.channelsAxiosClient = channelsClientGenerator(mitterAxiosInterceptionHost)\n    }\n\n    public newChannel(channel: Channel): Promise<Identifiable<string> | Channel> {\n        return this.channelsAxiosClient\n            .post<'/v1/channels'>('/v1/channels', channel)\n            .then(x => x.data)\n    }\n\n    public getAllChannels(\n        before: string | undefined = undefined,\n        after: string | undefined = undefined,\n        limit: number = 45\n    ): Promise<Channel[]> {\n        return this.channelsAxiosClient\n            .get<'/v1/channels'>('/v1/channels', {\n                params: Object.assign(\n                    {},\n                    after !== undefined ? { after } : {},\n                    before !== undefined ? { before } : {},\n                    limit !== undefined ? { limit } : {}\n                )\n            })\n            .then(x => x.data)\n    }\n\n    public getChannel(channelId: string): Promise<Channel> {\n        return this.channelsAxiosClient\n            .get<'/v1/channels/:channelId'>(`/v1/channels/${channelId}`)\n            .then(x => x.data)\n    }\n\n    public participatedChannels(): Promise<ParticipatedChannel[]> {\n        return this.channelsAxiosClient\n            .get<'/v1/users/me/channels'>('/v1/users/me/channels')\n            .then(x => x.data)\n    }\n\n    public deleteChannel(channelId: string): Promise<{}> {\n        return this.channelsAxiosClient\n            .delete<'/v1/channels/:channelId'>(`/v1/channels/${channelId}`)\n            .then(x => x.data)\n    }\n\n    public getChannelParticipants(channelId: string): Promise<ChannelParticipation[]> {\n        return this.channelsAxiosClient\n            .get<'/v1/channels/:channelId/participants'>(`/v1/channels/${channelId}/participants`)\n            .then(x => x.data)\n    }\n\n    public addParticipantToChannel(\n        channelId: string,\n        channelParticipation: ChannelParticipation\n    ): Promise<{}> {\n        return this.channelsAxiosClient\n            .post<'/v1/channels/:channelId/participants'>(\n                `/v1/channels/${channelId}/participants`,\n                channelParticipation\n            )\n            .then(x => x.data)\n    }\n\n    public deleteParticipantFromChannel(channelId: string, participantId: string): Promise<{}> {\n        return this.channelsAxiosClient\n            .delete<'/v1/channels/:channelId/participants/:participantId'>(\n                `/v1/channels/${channelId}/participants/${participantId}`\n            )\n            .then(x => x.data)\n    }\n\n    public deleteAllMessages(channelId: string): Promise<{}> {\n        return this.channelsAxiosClient\n            .delete<'/v1/channels/:channelId/messages'>(`v1/channels/${channelId}/messages`)\n            .then(x => x.data)\n    }\n}\n","import {\n    ChannelReferencingMessage,\n    Message,\n    MessageTimelineEvent,\n    TimelineEvent\n} from '@mitter-io/models'\nimport { TypedAxiosInstance } from 'restyped-axios'\nimport { MitterAxiosInterceptionHost } from '../Mitter'\nimport { clientGenerator } from './common'\nimport { MitterConstants } from './constants'\n\nconst base = `${MitterConstants.Api.VersionPrefix}/messages`\n\nexport const MessagesPaths = {\n    GetMessageById: `${base}/:messageId`,\n    GetMessageInChannel: `${MitterConstants.Api.VersionPrefix}/channels/:channelId/messages`,\n    PostMessageToChannel: `${MitterConstants.Api.VersionPrefix}/channels/:channelId/messages`\n}\n\nexport interface MessagesApi {\n    '/v1/messages/:messageId': {\n        GET: {\n            params: {\n                messageId: string\n            }\n\n            response: Message\n        }\n    }\n\n    '/v1/channels/:channelId/messages': {\n        GET: {\n            params: {\n                channelId: string\n            }\n\n            query: {\n                after?: string\n                before?: string\n                limit?: number\n            }\n\n            response: ChannelReferencingMessage[]\n        }\n\n        POST: {\n            params: {\n                channelId: string\n            }\n\n            body: Message\n        }\n    }\n\n    '/v1/channels/:channelId/messages/:messageIds/timeline': {\n        GET: {\n            params: {\n                channelId: string\n                messageIds: string\n            }\n            response: MessageTimelineEvent[]\n        }\n\n        POST: {\n            params: {\n                channelId: string\n                messageIds: string\n            }\n            body: TimelineEvent\n\n            response: {}\n        }\n    }\n\n    '/v1/channels/:channelId/messages/:messageIds': {\n        DELETE: {\n            params: {\n                channelId: string\n                messageIds: string\n            }\n        }\n    }\n}\n\nexport const messagesClientGenerator = clientGenerator<MessagesApi>()\n\nexport class MessagesClient {\n    private messagesAxiosClient: TypedAxiosInstance<MessagesApi>\n\n    constructor(private mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) {\n        this.messagesAxiosClient = messagesClientGenerator(mitterAxiosInterceptionHost)\n    }\n\n    public sendMessage(channelId: string, message: Message): Promise<Message> {\n        return this.messagesAxiosClient\n            .post<'/v1/channels/:channelId/messages'>(\n                `/v1/channels/${encodeURIComponent(channelId)}/messages`,\n                message\n            )\n            .then(x => x.data)\n    }\n\n    public getMessage(messageId: string): Promise<Message> {\n        return this.messagesAxiosClient\n            .get<'/v1/messages/:messageId'>(`/v1/messages/${messageId}`)\n            .then(x => x.data)\n    }\n\n    public getMessages(\n        channelId: string,\n        before: string | undefined = undefined,\n        after: string | undefined = undefined,\n        limit: number = 45\n    ): Promise<ChannelReferencingMessage[]> {\n        return this.messagesAxiosClient\n            .get<'/v1/channels/:channelId/messages'>(`/v1/channels/${channelId}/messages`, {\n                params: Object.assign(\n                    {},\n                    after !== undefined ? { after } : {},\n                    before !== undefined ? { before } : {},\n                    limit !== undefined ? { limit } : {}\n                )\n            })\n            .then(x => x.data)\n    }\n\n    public getMessageTimelineEvent(\n        channelId: string,\n        messageIds: string\n    ): Promise<MessageTimelineEvent[]> {\n        return this.messagesAxiosClient\n            .get<'/v1/channels/:channelId/messages/:messageIds/timeline'>(\n                `/v1/channels/${channelId}/messages/${messageIds}/timeline`\n            )\n            .then(x => x.data)\n    }\n\n    public addMessageTimelineEvent(\n        channelId: string,\n        messageIds: string,\n        timelineEvent: TimelineEvent\n    ) {\n        return this.messagesAxiosClient\n            .post<'/v1/channels/:channelId/messages/:messageIds/timeline'>(\n                `/v1/channels/${channelId}/messages/${messageIds}/timeline`,\n                timelineEvent\n            )\n            .then(x => x.data)\n    }\n\n    public deleteMessages(channelId: string, messageIds: string): Promise<void> {\n        return this.messagesAxiosClient\n            .delete<'/v1/channels/:channelId/messages/:messageIds'>(\n                `v1/channels/${channelId}/messages/${messageIds}`\n            )\n            .then(x => x.data)\n    }\n}\n","import { DeliveryEndpoint, User, UserLocator } from '@mitter-io/models'\nimport { Presence } from '@mitter-io/models/dist/types/user/Presence'\nimport { TypedAxiosInstance } from 'restyped-axios'\nimport { MitterAxiosInterceptionHost } from '../Mitter'\nimport { clientGenerator } from './common'\nimport { MitterConstants } from './constants'\n\nconst base = `${MitterConstants.Api.VersionPrefix}/users`\n\nexport const UsersPaths = {\n    GetMe: `${base}/me`,\n    GetUser: `${base}/:userId`,\n    GetMyScreenName: `${base}/me/screenname`,\n    GetUsersScreenName: `${base}/:userIds/screenname`\n}\n\nexport interface UsersApi {\n    '/v1/users/me': {\n        GET: {\n            response: User\n        }\n    }\n\n    '/v1/users/:userId': {\n        GET: {\n            params: {\n                userId: string\n            }\n\n            response: User\n        }\n    }\n\n    '/v1/users': {\n        GET: {\n            params: {\n                sandboxed: boolean\n            }\n            response: User[]\n        }\n        POST: {\n            response: {\n                identifier: string\n            }\n\n            body: User\n        }\n    }\n\n    '/v1/users/:userId/presence': {\n        GET: {\n            response: Presence\n        }\n        POST: {\n            body: Presence\n            response: {}\n        }\n    }\n\n    '/v1/users/:userId/locators': {\n        POST: {\n            body: UserLocator\n        }\n    }\n\n    '/v1/users/me/tokens': {\n        GET: {\n            response: void\n        }\n    }\n\n    '/v1/users/me/delivery-endpoints': {\n        POST: {\n            body: DeliveryEndpoint\n            response: DeliveryEndpoint\n        }\n        DELETE: {\n            body: DeliveryEndpoint['serializedEndpoint']\n            response: void\n        }\n    }\n}\n\nexport const usersClientGenerator = clientGenerator<UsersApi>()\n\nexport class UsersClient {\n    private usersAxiosClient: TypedAxiosInstance<UsersApi>\n\n    constructor(private mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) {\n        this.usersAxiosClient = usersClientGenerator(mitterAxiosInterceptionHost)\n    }\n\n    createUser(user: User): Promise<{ identifier: string }> {\n        return this.usersAxiosClient.post<'/v1/users'>('/v1/users', user).then(x => x.data)\n    }\n\n    getUsers(locators: string[] | undefined = undefined): Promise<User[]> {\n        return this.usersAxiosClient\n            .get<'/v1/users'>('/v1/users', {\n                params: Object.assign(\n                    {},\n                    locators === undefined ? { sandboxed: true } : {},\n                    locators !== undefined ? { locators } : {}\n                )\n            })\n            .then(x => x.data)\n    }\n\n    getUser(userId: string): Promise<User> {\n        return this.usersAxiosClient\n            .get<'/v1/users/:userId'>(`/v1/users/${userId}`)\n            .then(x => x.data)\n    }\n\n    setUserPresence(userId: string, userPresence: Presence): Promise<{}> {\n        return this.usersAxiosClient\n            .post<'/v1/users/:userId/presence'>(`/v1/users/${userId}/presence`, userPresence)\n            .then(x => x.data)\n    }\n\n    getUserPresence(userId: string): Promise<Presence> {\n        return this.usersAxiosClient\n            .get<'/v1/users/:userId/presence'>(`/v1/users/${userId}/presence`)\n            .then(x => x.data)\n    }\n\n    addUserLocator(userId: string, locator: UserLocator) {\n        return this.usersAxiosClient\n            .post<'/v1/users/:userId/locators'>(`/v1/users/${userId}/locators`, locator)\n            .then(x => x.data)\n    }\n\n    logout(): Promise<void> {\n        return this.usersAxiosClient\n            .get<'/v1/users/me/tokens'>(`/v1/users/me/logout`)\n            .then(x => x.data)\n    }\n\n    addUserDeliveryEndpoint(deliveryEndpoint: DeliveryEndpoint): Promise<DeliveryEndpoint> {\n        return this.usersAxiosClient\n            .post<'/v1/users/me/delivery-endpoints'>(\n                `/v1/users/me/delivery-endpoints`,\n                deliveryEndpoint\n            )\n            .then(x => x.data)\n    }\n\n    deleteUserDeliveryEndpoint(\n        serializedEndpoint: DeliveryEndpoint['serializedEndpoint']\n    ): Promise<void> {\n        return this.usersAxiosClient\n            .delete<'/v1/users/me/delivery-endpoints'>(\n                `/v1/users/me/delivery-endpoints/${serializedEndpoint}`\n            )\n            .then(x => x.data)\n    }\n}\n","import { TypedAxiosInstance } from 'restyped-axios'\nimport { MitterAxiosInterceptionHost } from '../Mitter'\nimport { clientGenerator } from './common'\nimport { MitterConstants } from './constants'\nimport { IssuedUserToken } from '@mitter-io/models'\n\nconst base = `${MitterConstants.Api.VersionPrefix}/users/:userId/tokens`\n\nexport const UserTokensPaths = {\n    GetMe: `${base}/me`,\n    GetUser: `${base}/:userId`,\n    GetMyScreenName: `${base}/me/screenname`,\n    GetUsersScreenName: `${base}/:userIds/screenname`\n}\n\nexport interface UserTokensApi {\n    '/v1/users/:userId/tokens': {\n        POST: {\n            params: {\n                userId: string\n            }\n\n            response: IssuedUserToken\n        }\n    }\n}\n\nexport const userTokensClientGenerator = clientGenerator<UserTokensApi>()\n\nexport class UserTokensClient {\n    private userTokensAxiosClient: TypedAxiosInstance<UserTokensApi>\n\n    constructor(private mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) {\n        this.userTokensAxiosClient = userTokensClientGenerator(mitterAxiosInterceptionHost)\n    }\n\n    getUserToken(userId: string): Promise<IssuedUserToken> {\n        return this.userTokensAxiosClient\n            .post<'/v1/users/:userId/tokens'>(`/v1/users/${userId}/tokens`)\n            .then(x => x.data)\n    }\n}\n","import { MitterAxiosInterceptionHost } from './Mitter'\nimport { ChannelsClient, MessagesClient, UsersClient } from './services'\nimport { UserTokensClient } from './services/UserTokensClient'\n\nexport class MitterClientSet {\n    private cachedClients: { [clientName: string]: any } = {}\n\n    constructor(private mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) {}\n\n    channels() {\n        return this.client(ChannelsClient)\n    }\n\n    messages() {\n        return this.client(MessagesClient)\n    }\n\n    users() {\n        return this.client(UsersClient)\n    }\n\n    userAuth() {\n        return this.client(UserTokensClient)\n    }\n\n    private client<T>(clientConstructor: {\n        new (mitterAxiosInterceptionHost: MitterAxiosInterceptionHost): T\n    }): T {\n        if (!(clientConstructor.name in this.cachedClients)) {\n            this.cachedClients[clientConstructor.name] = new clientConstructor(\n                this.mitterAxiosInterceptionHost\n            )\n        }\n\n        return this.cachedClients[clientConstructor.name] as T\n    }\n}\n","interface ResponseError extends Error {\n  response: Response\n}\n\nexport function checkStatus(response: Response): Response {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  }\n\n  const error: Error = new Error(response.statusText)\n  const errorResponse = { response: response }\n  const returnErrorResponse: ResponseError = { ...error, ...errorResponse }\n  throw returnErrorResponse\n}\n\nexport const parseJSON = (response: Response) => response.json()\n","export interface StatefulPromise<T> extends Promise<T> {\n    resolve(t?: T): void\n    reject(e: any): void\n    connect(promise: Promise<T>): void\n}\n\nexport function statefulPromise<T>() {\n    let _resolve: ((t?: T) => void) | undefined = undefined\n    let _reject: ((e: any) => void) | undefined = undefined\n\n    const promise = new Promise<T>((resolve, reject) => {\n        _resolve = resolve\n        _reject = reject\n    }) as StatefulPromise<T>\n\n    promise.resolve = _resolve!!\n    promise.reject = _reject!!\n    promise.connect = (outer: Promise<T>) => {\n        outer.then((t: T) => _resolve!!(t)).catch((e: any) => _reject!!(e))\n    }\n\n    return promise\n}\n","// tslint:disable-next-line:no-empty\nexport const noOp = () => {}\nexport * from './response-utils'\nexport * from './StatefulPromise'\n","import { DeliveryEndpoint, MessagingPipelinePayload } from '@mitter-io/models'\nimport MessagingPipelineDriver, {\n    BasePipelineSink,\n    PipelineDriverSpec,\n    PipelineSink\n} from './../specs/MessagingPipelineDriver'\nimport { KvStore, Mitter } from '../mitter-core'\nimport { noOp } from '../utils'\n\nexport type MessageSink = (payload: MessagingPipelinePayload) => void\n\nclass SavedDeliveryEndpoints {\n    constructor(public readonly deliveryEndpoints: { [driver: string]: DeliveryEndpoint } = {}) {}\n}\n\nexport class MessagingPipelineDriverHost {\n    // tslint:disable-next-line:variable-name\n    private static readonly StoreKeys = {\n        SavedDeliveryEndpoints: 'savedDeliveryEndpoints'\n    }\n\n    private savedDeliveryEndpoints: SavedDeliveryEndpoints = new SavedDeliveryEndpoints()\n    private pipelineDrivers: Array<MessagingPipelineDriver>\n    private subscriptions: Array<MessageSink> = []\n\n    constructor(\n        pipelineDrivers: Array<MessagingPipelineDriver> | MessagingPipelineDriver,\n        private mitterContext: Mitter,\n        private kvStore: KvStore | undefined = undefined,\n        private onAllPipelinesInitialized: (e?: any) => void = () => {}\n    ) {\n        if (pipelineDrivers instanceof Array) {\n            this.pipelineDrivers = pipelineDrivers\n        } else {\n            this.pipelineDrivers = [pipelineDrivers]\n        }\n\n        this.mitterContext.userAuthorizationAvailable(() => this.refresh())\n    }\n\n    public subscribe(messageSink: MessageSink) {\n        this.subscriptions.push(messageSink)\n    }\n\n    public refresh() {\n        this.loadStoredEndpoints().then(() =>\n            this.initializeMessagingPipelines()\n                .then(() => {\n                    this.onAllPipelinesInitialized()\n                })\n                .catch(e => {\n                    this.onAllPipelinesInitialized(e)\n                })\n        )\n    }\n\n    private async loadStoredEndpoints(): Promise<void> {\n        this.savedDeliveryEndpoints = new SavedDeliveryEndpoints()\n\n        if (this.kvStore === undefined) {\n            console.warn(\n                'You are not using a store for persisting delivery endpoints.' +\n                    ' This might cause your users to very quickly hit provisioning limits on their endpoints'\n            )\n\n            return\n        }\n\n        let savedDeliveryEndpoints = await this.kvStore.getItem<SavedDeliveryEndpoints>(\n            MessagingPipelineDriverHost.StoreKeys.SavedDeliveryEndpoints\n        )\n\n        if (savedDeliveryEndpoints !== undefined) {\n            this.savedDeliveryEndpoints = savedDeliveryEndpoints\n        }\n    }\n\n    private async initializeMessagingPipelines(): Promise<any> {\n        const pipelineInits: Promise<any>[] = []\n\n        await this.pipelineDrivers.forEach(async driver => {\n            let driverInitialized: Promise<boolean | void>\n            let driverSpec: PipelineDriverSpec\n\n            try {\n                let { initialized, pipelineDriverSpec } = await driver.initialize(\n                    this.mitterContext\n                )\n\n                driverInitialized = initialized\n                pipelineInits.push(driverInitialized)\n                driverSpec = pipelineDriverSpec\n            } catch (ex) {\n                console.log('Unable to initialize pipeline driver', ex)\n                throw ex\n            }\n\n            console.log(`Initializing pipeline driver '${driverSpec.name}'`)\n\n            let preProvisionPromise = Promise.resolve<DeliveryEndpoint | undefined>(undefined)\n\n            if (driverSpec.name in this.savedDeliveryEndpoints.deliveryEndpoints) {\n                preProvisionPromise = this.syncEndpoint(\n                    this.savedDeliveryEndpoints.deliveryEndpoints[driverSpec.name]\n                )\n                console.log(\n                    `Found an endpoint already present for ${\n                        driverSpec.name\n                    }. If invalid, it will be re-provisioned`\n                )\n            }\n\n            preProvisionPromise.then(syncedEndpoint => {\n                let operatingEndpoint: Promise<DeliveryEndpoint | undefined>\n\n                if (syncedEndpoint === undefined) {\n                    console.log('The endpoint on sync was determined to be invalid, refreshing')\n\n                    operatingEndpoint = driverInitialized\n                        .then(() => driver.getDeliveryEndpoint())\n                        .then(deliveryEndpoint => {\n                            if (deliveryEndpoint !== undefined) {\n                                this.registerEndpoint(driverSpec, deliveryEndpoint).then(\n                                    provisionedEndpoint => provisionedEndpoint\n                                )\n                            } else {\n                                return undefined\n                            }\n                        })\n                        .catch(e => {\n                            console.warn(\n                                `Could not instantiate pipeline driver ${driverSpec.name}`,\n                                e\n                            )\n                            throw e\n                        })\n                } else {\n                    console.log(\n                        'The endpoint on sync was determined to be valid. Continuing with the same'\n                    )\n                    operatingEndpoint = Promise.resolve(syncedEndpoint)\n                }\n\n                operatingEndpoint.then(endpoint => {\n                    if (endpoint !== undefined) {\n                        this.announceSinkForDriver(\n                            driver,\n                            endpoint,\n                            this.generatePipelineSink(driverSpec)\n                        )\n                    } else {\n                        if (driver.pipelineSinkChanged !== undefined) {\n                            driver.pipelineSinkChanged(\n                                this.generateStatelessPipelineSink(driverSpec)\n                            )\n                        }\n                    }\n                })\n            })\n        })\n\n        return Promise.all(pipelineInits)\n    }\n\n    private announceSinkForDriver(\n        driver: MessagingPipelineDriver,\n        endpoint: DeliveryEndpoint,\n        pipelineSink: PipelineSink\n    ) {\n        driver.endpointRegistered(pipelineSink, endpoint)\n\n        if (driver.pipelineSinkChanged !== undefined) {\n            driver.pipelineSinkChanged(pipelineSink)\n        }\n    }\n\n    private async syncEndpoint(\n        deliveryEndpoint: DeliveryEndpoint\n    ): Promise<DeliveryEndpoint | undefined> {\n        return fetch(\n            `${this.mitterContext.mitterApiBaseUrl}/v1/users/me/delivery-endpoints/${\n                deliveryEndpoint.serializedEndpoint\n            }`\n        )\n            .then((resp: Response) => {\n                return resp.json\n            })\n            .then((resp: any) => {\n                return resp as DeliveryEndpoint\n            })\n            .catch(() => {\n                return undefined\n            })\n    }\n\n    private registerEndpoint(\n        driverSpec: PipelineDriverSpec,\n        deliveryEndpoint: DeliveryEndpoint\n    ): Promise<DeliveryEndpoint> {\n        return fetch(`${this.mitterContext.mitterApiBaseUrl}/v1/users/me/delivery-endpoints`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(deliveryEndpoint)\n        })\n            .then(response => response.json)\n            .then((endpoint: any) => {\n                this.savedDeliveryEndpoints = new SavedDeliveryEndpoints(\n                    Object.assign({}, this.savedDeliveryEndpoints.deliveryEndpoints, {\n                        [driverSpec.name]: endpoint\n                    })\n                )\n\n                this.syncEndpointsToStore()\n                console.log('returning endpoint', endpoint)\n                return endpoint\n            })\n    }\n\n    private syncEndpointsToStore() {\n        if (this.kvStore === undefined) {\n            return\n        }\n\n        this.kvStore\n            .setItem(\n                MessagingPipelineDriverHost.StoreKeys.SavedDeliveryEndpoints,\n                this.savedDeliveryEndpoints\n            )\n            .catch(e => console.warn('Error syncing delivery endpoints to storage', e))\n    }\n\n    private generateStatelessPipelineSink(driverSpec: PipelineDriverSpec): BasePipelineSink {\n        return {\n            received: (payload: MessagingPipelinePayload) => {\n                this.consumeNewPayload(driverSpec, payload)\n            }\n        }\n    }\n\n    private generatePipelineSink(driverSpec: PipelineDriverSpec): PipelineSink {\n        return {\n            received: (payload: MessagingPipelinePayload) => {\n                this.consumeNewPayload(driverSpec, payload)\n            },\n\n            endpointInvalidated: (deliveryEndpoint: DeliveryEndpoint) => {\n                this.invalidateEndpoint(driverSpec, deliveryEndpoint)\n            },\n\n            authorizedUserUnavailable: noOp,\n\n            statusUpdate: noOp\n        }\n    }\n\n    private invalidateEndpoint(_: PipelineDriverSpec, __: DeliveryEndpoint) {\n        throw new Error('')\n    }\n\n    private consumeNewPayload(_: PipelineDriverSpec, payload: MessagingPipelinePayload) {\n        this.subscriptions.forEach(subscription => subscription(payload))\n    }\n}\n","export const StandardHeaders = {\n    UserAuthorizationHeader: 'X-Issued-Mitter-User-Authorization',\n    SudoUserAuthorizationHeader: 'X-Mitter-Sudo-User-Id',\n    ApplicationIdHeader: 'X-Mitter-Application-Id',\n    AccessKeyHeader: 'X-Mitter-Application-Access-Key',\n    AccessKeyAuthorizationHeader: 'Authorization'\n}\n","import { GenericInterceptor } from './interceptors-base'\nimport { StandardHeaders } from '../models/named-entities'\n\nexport class UserAuthorizationInterceptor {\n    constructor(\n        private readonly userAuthorizationFetcher: () => string | undefined,\n        private readonly applicationId: string | undefined = undefined\n    ) {}\n\n    getInterceptor(): GenericInterceptor {\n        return requestParams => {\n            if (!(StandardHeaders.UserAuthorizationHeader in requestParams.headers)) {\n                const userAuthorization = this.userAuthorizationFetcher()\n\n                if (userAuthorization !== undefined) {\n                    requestParams.headers[StandardHeaders.UserAuthorizationHeader] = [\n                        userAuthorization\n                    ]\n                }\n\n                if (this.applicationId !== undefined) {\n                    requestParams.headers[StandardHeaders.ApplicationIdHeader] = [\n                        this.applicationId\n                    ]\n                }\n            }\n        }\n    }\n}\n","type Promsified<T> = { [P in keyof T]: Promise<T[P]> }\n\nexport enum FetchMode {\n    Lazy,\n    Eager\n}\n\nexport abstract class MitterObject<T extends Promsified<U>, U> {\n    protected _ref: U | undefined\n    private fetchCall: (() => Promise<U>) | undefined\n    private mode: FetchMode = FetchMode.Lazy\n\n    protected init(fetchCall: () => Promise<U>, mode: FetchMode = FetchMode.Lazy) {\n        this.fetchCall = fetchCall\n        this.mode = mode\n\n        if (mode === FetchMode.Eager) {\n            fetchCall().then(ref => {\n                this._ref = ref\n            })\n        }\n    }\n\n    public sync(): Promise<U> {\n        return this.fetchCall!().then(it => {\n            this.setRef(it)\n            return it\n        })\n    }\n\n    public setRef(ref: U) {\n        this._ref = ref\n    }\n\n    protected proxy<K extends keyof U>(key: K): Promise<U[K]> {\n        if (this._ref !== undefined) {\n            return Promise.resolve(this._ref[key])\n        } else {\n            return (\n                this.sync()\n                    // TODO. we probably need some deadlock prevention mechanism, this can ideally\n                    // keep on going on forever\n                    .then(it => {\n                        this._ref = it\n                        return this._ref[key]\n                    })\n            )\n        }\n    }\n}\n","import { Mitter } from '../Mitter'\nimport { usersClientGenerator, channelsClientGenerator } from '../services'\nimport { TypedAxiosInstance } from 'restyped-axios'\nimport { UsersApi, ChannelsApi } from '../services'\nimport { User, UserLocator } from '@mitter-io/models'\nimport { MitterObject } from './mitter-objects'\n\nexport default class MitterUser extends MitterObject<MitterUser, User> {\n    get userId(): Promise<string> {\n        return super.proxy('userId')\n    }\n\n    get systemUser(): Promise<boolean> {\n        return super.proxy('systemUser')\n    }\n\n    get synthetic(): Promise<boolean> {\n        return super.proxy('synthetic')\n    }\n\n    get screenName(): Promise<{ screenName: string }> {\n        return super.proxy('screenName')\n    }\n\n    get identifier(): Promise<() => string> {\n        return super.proxy('identifier')\n    }\n\n    get userLocators(): Promise<UserLocator[]> {\n        return super.proxy('userLocators')\n    }\n\n    private readonly _userId: string\n    private readonly usersClient: TypedAxiosInstance<UsersApi>\n    private readonly channelsClient: TypedAxiosInstance<ChannelsApi>\n\n    constructor(private readonly mitter: Mitter, userId: string | undefined = undefined) {\n        super()\n\n        if (userId === undefined) {\n            this._userId = 'me'\n        } else {\n            this._userId = userId\n        }\n\n        this.usersClient = usersClientGenerator(this.mitter)\n        this.channelsClient = channelsClientGenerator(this.mitter)\n\n        super.init(() => {\n            return this.usersClient\n                .get<'/v1/users/:userId'>(`/v1/users/${this._userId}`)\n                .then(x => x.data)\n        })\n    }\n\n    channels() {\n        this.channelsClient\n            .get<'/v1/users/:userId/channels'>(`/v1/users/${this._userId}/channels`)\n            .then(x => x.data)\n    }\n}\n","import { KvStore } from './mitter-core'\nimport { MitterAxiosApiInterceptor } from './MitterApiGateway'\nimport { MitterClientSet } from './MitterClientSet'\nimport { Identifiable } from './models/base-types'\nimport MessagingPipelineDriver from './specs/MessagingPipelineDriver'\nimport { MessagingPipelineDriverHost } from './driver-host/MessagingPipelineDriverHost'\nimport { MessagingPipelinePayload, User } from '@mitter-io/models'\nimport { MitterConstants } from './services/constants'\nimport { UserAuthorizationInterceptor } from './auth/user-interceptors'\nimport MitterUser from './objects/Users'\n\nimport { AxiosInstance } from 'axios'\nimport { statefulPromise } from './utils'\n\nexport interface MitterAxiosInterceptionHost {\n    mitterApiBaseUrl: string\n    enableAxiosInterceptor(axiosInstance: AxiosInstance): void\n    disableAxiosInterceptor?(axiosInstance: AxiosInstance): void\n}\n\nexport abstract class MitterBase implements MitterAxiosInterceptionHost {\n    abstract mitterApiBaseUrl: string\n    abstract enableAxiosInterceptor(axiosInstance: AxiosInstance): void\n\n    version(): string {\n        return '0.5.0'\n    }\n\n    clients(): MitterClientSet {\n        return new MitterClientSet(this)\n    }\n}\n\nexport class Mitter extends MitterBase implements MitterAxiosInterceptionHost {\n    // tslint:disable-next-line:variable-name\n    private static readonly StoreKey = {\n        UserAuthorizationToken: 'userAuthorizationToken',\n        UserId: 'userId'\n    }\n    private cachedUserAuthorization: string | undefined = undefined\n    private cachedUserId: string | undefined = undefined\n\n    private mitterAxiosInterceptor: MitterAxiosApiInterceptor = new MitterAxiosApiInterceptor(\n        /* the application if */\n        this.applicationId,\n\n        /* The generic request interceptor to use */\n        new UserAuthorizationInterceptor(\n            () => this.cachedUserAuthorization,\n            this.applicationId\n        ).getInterceptor(),\n\n        /* The base url for mitter apis */\n        this.mitterApiBaseUrl\n    )\n\n    private messagingPipelineDriverHost: MessagingPipelineDriverHost\n    private subscriptions: ((payload: MessagingPipelinePayload) => void)[] = []\n    private onAuthAvailableSubscribers: (() => void)[] = []\n    private onPipelinesInitialized = statefulPromise<void>()\n\n    constructor(\n        public readonly kvStore: KvStore,\n        public readonly applicationId: string | undefined,\n        public readonly mitterApiBaseUrl: string = MitterConstants.MitterApiUrl,\n        private onTokenExpireFunctions: (() => void)[],\n        mitterInstanceReady: () => void,\n        pipelineDrivers: MessagingPipelineDriver[] | MessagingPipelineDriver,\n        globalHostObject: any\n    ) {\n        super()\n\n        this.messagingPipelineDriverHost = new MessagingPipelineDriverHost(\n            pipelineDrivers,\n            this,\n            kvStore,\n            (e?: any) => {\n                if (e !== undefined) {\n                    this.onPipelinesInitialized.reject(e)\n                } else {\n                    this.onPipelinesInitialized.resolve()\n                }\n            }\n        )\n\n        this.messagingPipelineDriverHost.subscribe((messagingPayload: any) =>\n            this.subscriptions.forEach(subscription => subscription(messagingPayload))\n        )\n\n        globalHostObject._mitter_context = this\n    }\n\n    userAuthorizationAvailable(onAuthAvailable: () => void) {\n        this.onAuthAvailableSubscribers.push(onAuthAvailable)\n    }\n\n    subscribeToPayload(subscription: (payload: MessagingPipelinePayload) => void) {\n        this.subscriptions.push(subscription)\n    }\n\n    enableAxiosInterceptor(axiosInstance: AxiosInstance) {\n        this.mitterAxiosInterceptor.enable(axiosInstance)\n    }\n\n    disableAxiosInterceptor(axiosInstance: AxiosInstance) {\n        this.mitterAxiosInterceptor.disable(axiosInstance)\n    }\n\n    setUserAuthorization(authorizationToken: string) {\n        if (authorizationToken.split('.').length === 3) {\n            this.cachedUserId = JSON.parse(atob(authorizationToken.split('.')[1]))['userId']\n        }\n\n        if (this.cachedUserAuthorization === authorizationToken) {\n            return\n        }\n\n        this.cachedUserAuthorization = authorizationToken\n        this.announceAuthorizationAvailable()\n        this.kvStore\n            .setItem(Mitter.StoreKey.UserAuthorizationToken, authorizationToken)\n            .catch((err: any) => {\n                throw new Error(`Error storing key ${err}`)\n            })\n    }\n\n    getUserAuthorization(): Promise<string | undefined> {\n        if (this.cachedUserAuthorization !== undefined) {\n            return Promise.resolve(this.cachedUserAuthorization)\n        } else {\n            return this.kvStore.getItem(Mitter.StoreKey.UserAuthorizationToken)\n        }\n    }\n\n    setUserId(userId: string): Promise<void> {\n        if (this.cachedUserId === userId) return Promise.resolve()\n\n        return this.kvStore.setItem(Mitter.StoreKey.UserId, userId).catch((err: any) => {\n            throw new Error(`Error storing userId ${err}`)\n        })\n    }\n\n    getUserId(): Promise<string> {\n        if (this.cachedUserId !== undefined) {\n            return Promise.resolve(this.cachedUserId)\n        } else {\n            return this.kvStore.getItem<string>(Mitter.StoreKey.UserId).then(userId => {\n                if (userId === undefined) {\n                    return this._me().userId.then(fetchedUserId => {\n                        return this.setUserId(fetchedUserId).then(() => fetchedUserId)\n                    })\n                } else {\n                    return Promise.resolve(userId)\n                }\n            })\n        }\n    }\n\n    onPipelinesInit(): Promise<void> {\n        return this.onPipelinesInitialized\n    }\n\n    // Smart-object values\n\n    me(): Identifiable<User> {\n        return {\n            identifier: this.cachedUserId!!\n        }\n    }\n\n    private _me(): MitterUser {\n        return new MitterUser(this)\n    }\n\n    private executeOnTokenExpireFunctions() {\n        this.onTokenExpireFunctions.forEach(onTokenExpire => {\n            onTokenExpire()\n        })\n    }\n\n    private announceAuthorizationAvailable() {\n        this.onAuthAvailableSubscribers.forEach(subscriber => subscriber())\n    }\n}\n","import { DeliveryEndpoint, MessagingPipelinePayload } from '@mitter-io/models'\nimport { Mitter } from './../mitter-core'\n\nexport interface PipelineDriverSpec {\n    name: string\n}\n\nexport enum PipelineStatus {\n    Connected,\n    Unavailable,\n    Disrupted,\n    ConnectionInProgress\n}\n\nexport interface PipelineDriverInitialization {\n    pipelineDriverSpec: PipelineDriverSpec\n    initialized: Promise<void | boolean>\n}\n\nexport interface BasePipelineSink {\n    received(payload: MessagingPipelinePayload): void\n}\n\nexport interface PipelineSink extends BasePipelineSink {\n    endpointInvalidated(deliveryEndpoint: DeliveryEndpoint): void\n    authorizedUserUnavailable(): void\n    statusUpdate(newStatus: PipelineStatus): void\n}\n\nexport default interface MessagingPipelineDriver {\n    initialize(mitter: Mitter): PipelineDriverInitialization\n\n    getDeliveryEndpoint(): Promise<DeliveryEndpoint | undefined>\n\n    endpointRegistered(pipelineSink: PipelineSink, userDeliveryEndpoint: DeliveryEndpoint): void\n\n    pipelineSinkChanged?(pipelineSink: BasePipelineSink): void\n\n    halt(): void\n}\n","import {\n    NewMessagePayload,\n    NewChannelTimelineEventPayload,\n    ParticipationChangedEventPayload,\n    NewChannelPayload,\n    NewMessageTimelineEventPayload\n} from '@mitter-io/models'\n\nfunction generatePipelinePayloadMatcher<T>(payloadType: string): (input: any) => input is T {\n    return (input: any): input is T => {\n        return input['@type'] !== undefined && input['@type'] === payloadType\n    }\n}\n\nexport const isNewMessagePayload = generatePipelinePayloadMatcher<NewMessagePayload>(\n    'new-message-payload'\n)\nexport const isNewChannelPayload = generatePipelinePayloadMatcher<NewChannelPayload>(\n    'new-channel-payload'\n)\n\nexport const isNewMessageTimelineEventPayload = generatePipelinePayloadMatcher<\n    NewMessageTimelineEventPayload\n>('new-message-timeline-event-payload')\nexport const isNewChannelTimelineEventPayload = generatePipelinePayloadMatcher<\n    NewChannelTimelineEventPayload\n>('new-channel-timeline-event-payload')\n\nexport const isParticipantChangedEventPayload = generatePipelinePayloadMatcher<\n    ParticipationChangedEventPayload\n>('participant-changed-event-payload')\n\nexport const isChannelStreamData = generatePipelinePayloadMatcher('stream-data')\n\nexport const isPipelineControlPayload = generatePipelinePayloadMatcher('pipeline-control-payload')\n"],"names":["axios_1","axios","base","tslib_1.__extends"],"mappings":"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"}