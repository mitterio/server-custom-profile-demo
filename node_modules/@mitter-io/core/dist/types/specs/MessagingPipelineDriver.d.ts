import { DeliveryEndpoint, MessagingPipelinePayload } from '@mitter-io/models';
import { Mitter } from './../mitter-core';
export interface PipelineDriverSpec {
    name: string;
}
export declare enum PipelineStatus {
    Connected = 0,
    Unavailable = 1,
    Disrupted = 2,
    ConnectionInProgress = 3
}
export interface PipelineDriverInitialization {
    pipelineDriverSpec: PipelineDriverSpec;
    initialized: Promise<void | boolean>;
}
export interface BasePipelineSink {
    received(payload: MessagingPipelinePayload): void;
}
export interface PipelineSink extends BasePipelineSink {
    endpointInvalidated(deliveryEndpoint: DeliveryEndpoint): void;
    authorizedUserUnavailable(): void;
    statusUpdate(newStatus: PipelineStatus): void;
}
export default interface MessagingPipelineDriver {
    initialize(mitter: Mitter): PipelineDriverInitialization;
    getDeliveryEndpoint(): Promise<DeliveryEndpoint | undefined>;
    endpointRegistered(pipelineSink: PipelineSink, userDeliveryEndpoint: DeliveryEndpoint): void;
    pipelineSinkChanged?(pipelineSink: BasePipelineSink): void;
    halt(): void;
}
