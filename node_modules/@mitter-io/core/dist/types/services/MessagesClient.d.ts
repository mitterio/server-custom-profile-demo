import { ChannelReferencingMessage, Message, MessageTimelineEvent, TimelineEvent } from '@mitter-io/models';
import { TypedAxiosInstance } from 'restyped-axios';
import { MitterAxiosInterceptionHost } from '../Mitter';
export declare const MessagesPaths: {
    GetMessageById: string;
    GetMessageInChannel: string;
    PostMessageToChannel: string;
};
export interface MessagesApi {
    '/v1/messages/:messageId': {
        GET: {
            params: {
                messageId: string;
            };
            response: Message;
        };
    };
    '/v1/channels/:channelId/messages': {
        GET: {
            params: {
                channelId: string;
            };
            query: {
                after?: string;
                before?: string;
                limit?: number;
            };
            response: ChannelReferencingMessage[];
        };
        POST: {
            params: {
                channelId: string;
            };
            body: Message;
        };
    };
    '/v1/channels/:channelId/messages/:messageIds/timeline': {
        GET: {
            params: {
                channelId: string;
                messageIds: string;
            };
            response: MessageTimelineEvent[];
        };
        POST: {
            params: {
                channelId: string;
                messageIds: string;
            };
            body: TimelineEvent;
            response: {};
        };
    };
    '/v1/channels/:channelId/messages/:messageIds': {
        DELETE: {
            params: {
                channelId: string;
                messageIds: string;
            };
        };
    };
}
export declare const messagesClientGenerator: (mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) => TypedAxiosInstance<MessagesApi>;
export declare class MessagesClient {
    private mitterAxiosInterceptionHost;
    private messagesAxiosClient;
    constructor(mitterAxiosInterceptionHost: MitterAxiosInterceptionHost);
    sendMessage(channelId: string, message: Message): Promise<Message>;
    getMessage(messageId: string): Promise<Message>;
    getMessages(channelId: string, before?: string | undefined, after?: string | undefined, limit?: number): Promise<ChannelReferencingMessage[]>;
    getMessageTimelineEvent(channelId: string, messageIds: string): Promise<MessageTimelineEvent[]>;
    addMessageTimelineEvent(channelId: string, messageIds: string, timelineEvent: TimelineEvent): Promise<{}>;
    deleteMessages(channelId: string, messageIds: string): Promise<void>;
}
