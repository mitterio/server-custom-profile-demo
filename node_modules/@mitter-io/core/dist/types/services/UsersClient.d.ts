import { DeliveryEndpoint, User, UserLocator } from '@mitter-io/models';
import { Presence } from '@mitter-io/models/dist/types/user/Presence';
import { TypedAxiosInstance } from 'restyped-axios';
import { MitterAxiosInterceptionHost } from '../Mitter';
export declare const UsersPaths: {
    GetMe: string;
    GetUser: string;
    GetMyScreenName: string;
    GetUsersScreenName: string;
};
export interface UsersApi {
    '/v1/users/me': {
        GET: {
            response: User;
        };
    };
    '/v1/users/:userId': {
        GET: {
            params: {
                userId: string;
            };
            response: User;
        };
    };
    '/v1/users': {
        GET: {
            params: {
                sandboxed: boolean;
            };
            response: User[];
        };
        POST: {
            response: {
                identifier: string;
            };
            body: User;
        };
    };
    '/v1/users/:userId/presence': {
        GET: {
            response: Presence;
        };
        POST: {
            body: Presence;
            response: {};
        };
    };
    '/v1/users/:userId/locators': {
        POST: {
            body: UserLocator;
        };
    };
    '/v1/users/me/tokens': {
        GET: {
            response: void;
        };
    };
    '/v1/users/me/delivery-endpoints': {
        POST: {
            body: DeliveryEndpoint;
            response: DeliveryEndpoint;
        };
        DELETE: {
            body: DeliveryEndpoint['serializedEndpoint'];
            response: void;
        };
    };
}
export declare const usersClientGenerator: (mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) => TypedAxiosInstance<UsersApi>;
export declare class UsersClient {
    private mitterAxiosInterceptionHost;
    private usersAxiosClient;
    constructor(mitterAxiosInterceptionHost: MitterAxiosInterceptionHost);
    createUser(user: User): Promise<{
        identifier: string;
    }>;
    getUsers(locators?: string[] | undefined): Promise<User[]>;
    getUser(userId: string): Promise<User>;
    setUserPresence(userId: string, userPresence: Presence): Promise<{}>;
    getUserPresence(userId: string): Promise<Presence>;
    addUserLocator(userId: string, locator: UserLocator): Promise<any>;
    logout(): Promise<void>;
    addUserDeliveryEndpoint(deliveryEndpoint: DeliveryEndpoint): Promise<DeliveryEndpoint>;
    deleteUserDeliveryEndpoint(serializedEndpoint: DeliveryEndpoint['serializedEndpoint']): Promise<void>;
}
