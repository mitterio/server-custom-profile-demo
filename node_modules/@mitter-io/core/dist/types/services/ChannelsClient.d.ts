import { TypedAxiosInstance } from 'restyped-axios';
import { Identifiable } from '../models/base-types';
import { MitterAxiosInterceptionHost } from '../Mitter';
import { ParticipatedChannel, Channel, ChannelParticipation } from '@mitter-io/models';
export declare const ChannelsPaths: {
    GetParticipatedChannelsForMe: string;
    GetParticipatedChannels: string;
    GetChannels: string;
    GetChannelsById: string;
};
export interface ChannelsApi {
    '/v1/users/me/channels': {
        GET: {
            response: ParticipatedChannel[];
        };
        query: {
            after?: string;
            before?: string;
            limit?: number;
        };
    };
    '/v1/users/:userId/channels': {
        GET: {
            response: ParticipatedChannel[];
        };
    };
    '/v1/channels/:channelId': {
        GET: {
            params: {
                channelId: string;
            };
            response: Channel;
        };
        DELETE: {
            params: {
                channelId: string;
            };
            response: {};
        };
    };
    '/v1/channels': {
        GET: {
            response: Channel[];
        };
        POST: {
            response: Identifiable<string> | Channel;
            body: Channel;
        };
    };
    '/v1/channels/:channelId/participants': {
        GET: {
            params: {
                channelId: string;
            };
        };
        POST: {
            params: {
                channelId: string;
            };
            response: {};
        };
    };
    '/v1/channels/:channelId/participants/:participantId': {
        DELETE: {
            params: {
                channelId: string;
                participantId: string;
            };
            response: {};
        };
    };
    '/v1/channels/:channelId/messages': {
        DELETE: {
            params: {
                channelId: string;
            };
            response: {};
        };
    };
}
export declare const channelsClientGenerator: (mitterAxiosInterceptionHost: MitterAxiosInterceptionHost) => TypedAxiosInstance<ChannelsApi>;
export declare class ChannelsClient {
    private mitterAxiosInterceptionHost;
    private channelsAxiosClient;
    constructor(mitterAxiosInterceptionHost: MitterAxiosInterceptionHost);
    newChannel(channel: Channel): Promise<Identifiable<string> | Channel>;
    getAllChannels(before?: string | undefined, after?: string | undefined, limit?: number): Promise<Channel[]>;
    getChannel(channelId: string): Promise<Channel>;
    participatedChannels(): Promise<ParticipatedChannel[]>;
    deleteChannel(channelId: string): Promise<{}>;
    getChannelParticipants(channelId: string): Promise<ChannelParticipation[]>;
    addParticipantToChannel(channelId: string, channelParticipation: ChannelParticipation): Promise<{}>;
    deleteParticipantFromChannel(channelId: string, participantId: string): Promise<{}>;
    deleteAllMessages(channelId: string): Promise<{}>;
}
