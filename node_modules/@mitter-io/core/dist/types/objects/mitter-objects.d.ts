declare type Promsified<T> = {
    [P in keyof T]: Promise<T[P]>;
};
export declare enum FetchMode {
    Lazy = 0,
    Eager = 1
}
export declare abstract class MitterObject<T extends Promsified<U>, U> {
    protected _ref: U | undefined;
    private fetchCall;
    private mode;
    protected init(fetchCall: () => Promise<U>, mode?: FetchMode): void;
    sync(): Promise<U>;
    setRef(ref: U): void;
    protected proxy<K extends keyof U>(key: K): Promise<U[K]>;
}
export {};
