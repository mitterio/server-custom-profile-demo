import { MessagingPipelinePayload } from '@mitter-io/models';
import MessagingPipelineDriver from './../specs/MessagingPipelineDriver';
import { KvStore, Mitter } from '../mitter-core';
export declare type MessageSink = (payload: MessagingPipelinePayload) => void;
export declare class MessagingPipelineDriverHost {
    private mitterContext;
    private kvStore;
    private onAllPipelinesInitialized;
    private static readonly StoreKeys;
    private savedDeliveryEndpoints;
    private pipelineDrivers;
    private subscriptions;
    constructor(pipelineDrivers: Array<MessagingPipelineDriver> | MessagingPipelineDriver, mitterContext: Mitter, kvStore?: KvStore | undefined, onAllPipelinesInitialized?: (e?: any) => void);
    subscribe(messageSink: MessageSink): void;
    refresh(): void;
    private loadStoredEndpoints;
    private initializeMessagingPipelines;
    private announceSinkForDriver;
    private syncEndpoint;
    private registerEndpoint;
    private syncEndpointsToStore;
    private generateStatelessPipelineSink;
    private generatePipelineSink;
    private invalidateEndpoint;
    private consumeNewPayload;
}
