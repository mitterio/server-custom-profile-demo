import { KvStore } from './mitter-core';
import { MitterClientSet } from './MitterClientSet';
import { Identifiable } from './models/base-types';
import MessagingPipelineDriver from './specs/MessagingPipelineDriver';
import { MessagingPipelinePayload, User } from '@mitter-io/models';
import { AxiosInstance } from 'axios';
export interface MitterAxiosInterceptionHost {
    mitterApiBaseUrl: string;
    enableAxiosInterceptor(axiosInstance: AxiosInstance): void;
    disableAxiosInterceptor?(axiosInstance: AxiosInstance): void;
}
export declare abstract class MitterBase implements MitterAxiosInterceptionHost {
    abstract mitterApiBaseUrl: string;
    abstract enableAxiosInterceptor(axiosInstance: AxiosInstance): void;
    version(): string;
    clients(): MitterClientSet;
}
export declare class Mitter extends MitterBase implements MitterAxiosInterceptionHost {
    readonly kvStore: KvStore;
    readonly applicationId: string | undefined;
    readonly mitterApiBaseUrl: string;
    private onTokenExpireFunctions;
    private static readonly StoreKey;
    private cachedUserAuthorization;
    private cachedUserId;
    private mitterAxiosInterceptor;
    private messagingPipelineDriverHost;
    private subscriptions;
    private onAuthAvailableSubscribers;
    private onPipelinesInitialized;
    constructor(kvStore: KvStore, applicationId: string | undefined, mitterApiBaseUrl: string, onTokenExpireFunctions: (() => void)[], mitterInstanceReady: () => void, pipelineDrivers: MessagingPipelineDriver[] | MessagingPipelineDriver, globalHostObject: any);
    userAuthorizationAvailable(onAuthAvailable: () => void): void;
    subscribeToPayload(subscription: (payload: MessagingPipelinePayload) => void): void;
    enableAxiosInterceptor(axiosInstance: AxiosInstance): void;
    disableAxiosInterceptor(axiosInstance: AxiosInstance): void;
    setUserAuthorization(authorizationToken: string): void;
    getUserAuthorization(): Promise<string | undefined>;
    setUserId(userId: string): Promise<void>;
    getUserId(): Promise<string>;
    onPipelinesInit(): Promise<void>;
    me(): Identifiable<User>;
    private _me;
    private executeOnTokenExpireFunctions;
    private announceAuthorizationAvailable;
}
