import IdentifiableEntity from '../annotations/IdentifiableEntity';
import { TimelineEvent } from './TimelineEvents';
import { EntityMetadata } from './../entity/EntityMetadata';
import { EntityProfile } from './../entity/EntityProfile';
export declare enum StandardRuleSetNames {
    DirectMessage = "io.mitter.ruleset.chats.DirectMessage",
    GroupChat = "io.mitter.ruleset.chats.GroupChat",
    SystemChannel = "io.mitter.ruleset.chats.SystemChannel",
    SingleParticipantChannel = "io.mitter.ruleset.chats.SingleParticipantChannel"
}
export declare enum ParticipationStatus {
    Active = "Active",
    ReadOnly = "ReadOnly",
    Disabled = "Disabled"
}
export declare class Channel implements IdentifiableEntity<Channel> {
    channelId: string;
    defaultRuleSet: string;
    participation: Array<ChannelParticipation>;
    timelineEvents: Array<TimelineEvent>;
    systemChannel: boolean;
    entityMetadata: EntityMetadata;
    entityProfile: EntityProfile;
    constructor(channelId: string, defaultRuleSet: string, participation: Array<ChannelParticipation>, timelineEvents: Array<TimelineEvent>, systemChannel: boolean, entityMetadata: EntityMetadata, entityProfile: EntityProfile);
    identifier(): string;
}
export declare class ChannelParticipation {
    participantId: {
        identifier: string;
    };
    participationStatus: ParticipationStatus;
    channelId: string;
    constructor(participantId: {
        identifier: string;
    }, participationStatus: ParticipationStatus, channelId: string);
}
export declare class ParticipatedChannel {
    participationStatus: ParticipationStatus;
    channel: Channel;
    constructor(participationStatus: ParticipationStatus, channel: Channel);
}
