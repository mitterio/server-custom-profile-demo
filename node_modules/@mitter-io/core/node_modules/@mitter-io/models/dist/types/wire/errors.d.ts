export declare enum MitterErrorCodes {
    ClaimRejected = "claim_rejected",
    EntityNotFound = "entity_not_found",
    AuthorizationException = "authorization_exception",
    MissingPrivilege = "missing_privilege",
    MissingContext = "missing_context"
}
export declare type MitterErrorPreamble = {
    errorCode: string;
};
export declare type EntityNotFoundError = MitterErrorPreamble & {
    diagnostics: {
        entityType: string;
        entityLocator: string;
    };
};
export declare type AuthorizationException = MitterErrorPreamble & {};
export declare type MissingPrivilegeError = MitterErrorPreamble & {
    diagnostics: {
        missingPrivileges: Array<string>;
        actingEntity: string;
        actor?: string;
    };
};
export declare type MissingContextError = MitterErrorPreamble & {
    diagnostics: {
        missingContext: string;
    };
};
export declare type ClaimRejectedError = MitterErrorPreamble & {
    diagnostics: {
        claimType: string;
        claimOn: string;
        claimRejectionType: string;
    };
};
export declare type MitterError = MitterErrorPreamble & (EntityNotFoundError | AuthorizationException | MissingContextError | MissingPrivilegeError);
