import { MessagingPipelinePayload, PipelineControlPayload } from './../mitter-models';
export declare function fieldBasedPredicateGenerator<B, T extends B>(field: keyof B, value: any): (target: B) => target is T;
export declare class PayloadTypes {
    static isPipelineControl: (target: MessagingPipelinePayload) => target is PipelineControlPayload;
    static isNewChannel: (target: MessagingPipelinePayload) => target is PipelineControlPayload;
    static isNewMessage: (target: MessagingPipelinePayload) => target is PipelineControlPayload;
    static isNewMessageTimelineEvent: (target: MessagingPipelinePayload) => target is PipelineControlPayload;
    static isNewChannelTimelineEvent: (target: MessagingPipelinePayload) => target is PipelineControlPayload;
    static isParticipationChanedEvent: (target: MessagingPipelinePayload) => target is PipelineControlPayload;
    static isChannelStreamData: (target: MessagingPipelinePayload) => target is PipelineControlPayload;
    private static pipelinePayloadPredicateGenerator;
}
export declare class ErrorTypes {
    static isClaimRejected: (target: import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError) => target is import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError;
    static isEntityNotFound: (target: import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError) => target is import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError;
    static isAuthorizationException: (target: import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError) => target is import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError;
    static isMissingPrivilege: (target: import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError) => target is import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError;
    static isMissingContext: (target: import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError) => target is import("../wire/errors").MitterErrorPreamble | import("../wire/errors").EntityNotFoundError | import("../wire/errors").MissingContextError | import("../wire/errors").MissingPrivilegeError;
    private static mitterErrorPayloadPredicateGenerator;
}
export declare function getId(input: {
    identifier: string;
} | string): string;
