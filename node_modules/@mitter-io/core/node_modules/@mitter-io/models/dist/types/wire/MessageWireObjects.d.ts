import Identifiable from '../annotations/Identifiable';
import { Message } from '../messaging/Messages';
declare enum SortOrder {
    Ascending = 0,
    Descending = 1,
    Implied = 2
}
export declare class MessageQuery {
    channelId: string;
    limit: number;
    withReadSelectors: Array<string>;
    beforeMessageId: Identifiable<Message> | null;
    afterMessageId: Identifiable<Message> | null;
    constructor(channelId: string, limit: number, withReadSelectors: Array<string>, beforeMessageId: Identifiable<Message> | null, afterMessageId: Identifiable<Message> | null);
}
export declare class AddableMessage {
    message: Message;
    constructor(message: Message);
}
export declare class ChannelMessageSet {
    channelId: string;
    messages: Array<Message>;
    constructor(channelId: string, messages: Array<Message>);
}
export declare class ChannelMessage {
    channelId: string;
    message: Message;
    constructor(channelId: string, message: Message);
}
export declare class Paginated<T extends Identifiable<T>> {
    data: Array<T>;
    estimatedTotalCount: number;
    constructor(data: Array<T>, estimatedTotalCount: number);
}
export declare class EntityQuery<T extends Identifiable<T>> {
    beforeId: Identifiable<T> | null;
    afterId: Identifiable<T> | null;
    limit: number;
    entityCountOffset: number;
    sortOrder: SortOrder;
    withReadSelectors: Array<string>;
    constructor(beforeId: Identifiable<T> | null, afterId: Identifiable<T> | null, limit: number, entityCountOffset: number, sortOrder: SortOrder, withReadSelectors: Array<string>);
}
export {};
