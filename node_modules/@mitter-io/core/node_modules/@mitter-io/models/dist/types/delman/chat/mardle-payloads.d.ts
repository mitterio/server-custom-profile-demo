import { Channel, ParticipationStatus } from '../../messaging/Channels';
import { TimelineEvent } from '../../messaging/TimelineEvents';
import { ContextFreeMessage } from '../../messaging/ContextFreeMessage';
import { MessagingPipelinePayload } from './payloads';
import { Message } from '../../messaging/Messages';
export declare enum StandardPipelinePayloadNames {
    NewChannelPayload = "new-channel-payload",
    NewMessagePayload = "new-message-payload",
    NewMessageTimelineEventPayload = "new-message-timeline-event-payload",
    NewChannelTimelineEventPayload = "new-channel-timeline-event-payload",
    ParticipationChangedEventPayload = "participation-changed-event-payload",
    ChannelStreamData = "stream-data",
    PipelineControlPayload = "pipeline-control-payload"
}
export declare class NewChannelPayload extends MessagingPipelinePayload {
    channel: Channel;
    constructor(channel: Channel, globalPipelinePayloadId: string, type: string);
}
export declare class NewMessagePayload extends MessagingPipelinePayload {
    message: Message;
    channelId: {
        identifier: string;
    };
    constructor(message: Message, channelId: {
        identifier: string;
    }, globalPipelinePayloadId: string, type: string);
}
export declare class NewMessageTimelineEventPayload extends MessagingPipelinePayload {
    timelineEvent: TimelineEvent;
    messageId: {
        identifier: string;
    };
    constructor(timelineEvent: TimelineEvent, messageId: {
        identifier: string;
    }, globalPipelinePayloadId: string, type: string);
}
export declare class NewChannelTimelineEventPayload extends MessagingPipelinePayload {
    timelineEvent: TimelineEvent;
    channelId: string;
    constructor(timelineEvent: TimelineEvent, channelId: string, globalPipelinePayloadId: string, type: string);
}
export declare class ParticipationChangedEventPayload extends MessagingPipelinePayload {
    oldStatus: ParticipationStatus;
    newStatus: ParticipationStatus;
    participantId: string;
    channelId: {
        identifier: string;
    };
    constructor(oldStatus: ParticipationStatus, newStatus: ParticipationStatus, participantId: string, channelId: {
        identifier: string;
    }, globalPipelinePayloadId: string, type: string);
}
export declare class ChannelStreamData extends MessagingPipelinePayload {
    channelId: string;
    streamId: string;
    streamData: ContextFreeMessage;
    constructor(channelId: string, streamId: string, streamData: ContextFreeMessage, globalPipelinePayloadId: string, type: string);
}
export declare class PipelineControlPayload extends MessagingPipelinePayload {
    errorBody: any;
    allOk: boolean;
    constructor(errorBody: any, allOk: boolean, globalPipelinePayloadId: string, type: string);
}
