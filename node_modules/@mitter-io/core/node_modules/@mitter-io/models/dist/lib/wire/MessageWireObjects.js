"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SortOrder;
(function (SortOrder) {
    SortOrder[SortOrder["Ascending"] = 0] = "Ascending";
    SortOrder[SortOrder["Descending"] = 1] = "Descending";
    SortOrder[SortOrder["Implied"] = 2] = "Implied";
})(SortOrder || (SortOrder = {}));
var MessageQuery = /** @class */ (function () {
    /*AclAccessorSelector should be used instead of array*/
    function MessageQuery(channelId, limit, withReadSelectors, beforeMessageId, afterMessageId) {
        if (limit === void 0) { limit = 10; }
        this.channelId = channelId;
        this.limit = limit;
        this.withReadSelectors = withReadSelectors;
        this.beforeMessageId = beforeMessageId;
        this.afterMessageId = afterMessageId;
    }
    return MessageQuery;
}());
exports.MessageQuery = MessageQuery;
var AddableMessage = /** @class */ (function () {
    function AddableMessage(message) {
        this.message = message;
    }
    return AddableMessage;
}());
exports.AddableMessage = AddableMessage;
var ChannelMessageSet = /** @class */ (function () {
    function ChannelMessageSet(channelId, messages) {
        this.channelId = channelId;
        this.messages = messages;
    }
    return ChannelMessageSet;
}());
exports.ChannelMessageSet = ChannelMessageSet;
var ChannelMessage = /** @class */ (function () {
    function ChannelMessage(channelId, message) {
        this.channelId = channelId;
        this.message = message;
    }
    return ChannelMessage;
}());
exports.ChannelMessage = ChannelMessage;
var Paginated = /** @class */ (function () {
    function Paginated(data, estimatedTotalCount) {
        this.data = data;
        this.estimatedTotalCount = estimatedTotalCount;
    }
    return Paginated;
}());
exports.Paginated = Paginated;
var EntityQuery = /** @class */ (function () {
    /*AclAccessorSelector should be used instead of array*/
    function EntityQuery(beforeId, afterId, limit, entityCountOffset, sortOrder, withReadSelectors) {
        this.beforeId = beforeId;
        this.afterId = afterId;
        this.limit = limit;
        this.entityCountOffset = entityCountOffset;
        this.sortOrder = sortOrder;
        this.withReadSelectors = withReadSelectors;
    }
    return EntityQuery;
}());
exports.EntityQuery = EntityQuery;
//# sourceMappingURL=MessageWireObjects.js.map