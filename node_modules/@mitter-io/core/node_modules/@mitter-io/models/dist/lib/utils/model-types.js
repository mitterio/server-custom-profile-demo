"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mitter_models_1 = require("./../mitter-models");
var errors_1 = require("./../wire/errors");
function fieldBasedPredicateGenerator(field, value) {
    return function (target) {
        return target[field] === value;
    };
}
exports.fieldBasedPredicateGenerator = fieldBasedPredicateGenerator;
var PayloadTypes = /** @class */ (function () {
    function PayloadTypes() {
    }
    PayloadTypes.pipelinePayloadPredicateGenerator = function (typeSpecifier) {
        return fieldBasedPredicateGenerator('@type', typeSpecifier);
    };
    PayloadTypes.isPipelineControl = PayloadTypes.pipelinePayloadPredicateGenerator(mitter_models_1.StandardPipelinePayloadNames.PipelineControlPayload);
    PayloadTypes.isNewChannel = PayloadTypes.pipelinePayloadPredicateGenerator(mitter_models_1.StandardPipelinePayloadNames.NewChannelPayload);
    PayloadTypes.isNewMessage = PayloadTypes.pipelinePayloadPredicateGenerator(mitter_models_1.StandardPipelinePayloadNames.NewMessagePayload);
    PayloadTypes.isNewMessageTimelineEvent = PayloadTypes.pipelinePayloadPredicateGenerator(mitter_models_1.StandardPipelinePayloadNames.NewMessageTimelineEventPayload);
    PayloadTypes.isNewChannelTimelineEvent = PayloadTypes.pipelinePayloadPredicateGenerator(mitter_models_1.StandardPipelinePayloadNames.NewChannelTimelineEventPayload);
    PayloadTypes.isParticipationChanedEvent = PayloadTypes.pipelinePayloadPredicateGenerator(mitter_models_1.StandardPipelinePayloadNames.ParticipationChangedEventPayload);
    PayloadTypes.isChannelStreamData = PayloadTypes.pipelinePayloadPredicateGenerator(mitter_models_1.StandardPipelinePayloadNames.ChannelStreamData);
    return PayloadTypes;
}());
exports.PayloadTypes = PayloadTypes;
var ErrorTypes = /** @class */ (function () {
    function ErrorTypes() {
    }
    ErrorTypes.mitterErrorPayloadPredicateGenerator = function (typeSpecifier) {
        return fieldBasedPredicateGenerator('errorCode', typeSpecifier);
    };
    ErrorTypes.isClaimRejected = ErrorTypes.mitterErrorPayloadPredicateGenerator(errors_1.MitterErrorCodes.ClaimRejected);
    ErrorTypes.isEntityNotFound = ErrorTypes.mitterErrorPayloadPredicateGenerator(errors_1.MitterErrorCodes.EntityNotFound);
    ErrorTypes.isAuthorizationException = ErrorTypes.mitterErrorPayloadPredicateGenerator(errors_1.MitterErrorCodes.AuthorizationException);
    ErrorTypes.isMissingPrivilege = ErrorTypes.mitterErrorPayloadPredicateGenerator(errors_1.MitterErrorCodes.MissingPrivilege);
    ErrorTypes.isMissingContext = ErrorTypes.mitterErrorPayloadPredicateGenerator(errors_1.MitterErrorCodes.MissingContext);
    return ErrorTypes;
}());
exports.ErrorTypes = ErrorTypes;
function getId(input) {
    if (typeof input === 'string') {
        return input;
    }
    else {
        return input.identifier;
    }
}
exports.getId = getId;
//# sourceMappingURL=model-types.js.map