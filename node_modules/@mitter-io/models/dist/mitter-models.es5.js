var AccessCredential = /** @class */ (function () {
    function AccessCredential(accessKey, accessSecret, createdAt) {
        this.accessKey = accessKey;
        this.accessSecret = accessSecret;
        this.createdAt = createdAt;
    }
    return AccessCredential;
}());

var AccessCredentialStub = /** @class */ (function () {
    function AccessCredentialStub(accessKey, lastUsed, createdAt, lastAction) {
        this.accessKey = accessKey;
        this.lastUsed = lastUsed;
        this.createdAt = createdAt;
        this.lastAction = lastAction;
    }
    return AccessCredentialStub;
}());

var AccessKey = /** @class */ (function () {
    function AccessKey(key) {
        this.key = key;
    }
    return AccessKey;
}());

var AccessSecret = /** @class */ (function () {
    function AccessSecret(secret) {
        this.secret = secret;
    }
    return AccessSecret;
}());

var Application = /** @class */ (function () {
    function Application(applicationId, name, sandboxed) {
        this.applicationId = applicationId;
        this.name = name;
        this.sandboxed = sandboxed;
    }
    Application.prototype.identifier = function () {
        return this.applicationId;
    };
    return Application;
}());

var StandardApplicationProperty;
(function (StandardApplicationProperty) {
    StandardApplicationProperty["GoogleApiCredential"] = "google-api-credential";
    StandardApplicationProperty["GoogleOAuthCredential"] = "google-oauth-credential";
    StandardApplicationProperty["GoogleServiceAccountCredential"] = "google-service-account-credential";
    StandardApplicationProperty["AwsAccessCredentials"] = "aws-access-credentials";
    StandardApplicationProperty["ApnsProperties"] = "apns-properties";
    StandardApplicationProperty["FcmProperties"] = "fcm-properties";
    StandardApplicationProperty["OAuthIntegrationProperty"] = "oauth-integration";
    StandardApplicationProperty["TransactionalWebhookProperty"] = "transactional-webhook";
    StandardApplicationProperty["AwsSqsQueueProperty"] = "aws-sqs-queue";
    StandardApplicationProperty["AwsSnsTopicProperty"] = "aws-sns-topic";
    StandardApplicationProperty["AwsSqsEventBusProperty"] = "aws-sqs-event-bus";
    StandardApplicationProperty["AwsSnsEventBusProperty"] = "aws-sns-event-bus";
    StandardApplicationProperty["NonStandardProperty"] = "";
})(StandardApplicationProperty || (StandardApplicationProperty = {}));

var AwsAccessCredentials = /** @class */ (function () {
    function AwsAccessCredentials(awsAccessKey, awsAccessSecret, awsRegion) {
        this.awsAccessKey = awsAccessKey;
        this.awsAccessSecret = awsAccessSecret;
        this.awsRegion = awsRegion;
    }
    return AwsAccessCredentials;
}());

var AwsServiceIntegrationProperty = /** @class */ (function () {
    function AwsServiceIntegrationProperty(region, awsAccessCredentials) {
        this.region = region;
        this.awsAccessCredentials = awsAccessCredentials;
    }
    return AwsServiceIntegrationProperty;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var AwsSnsTopicProperty = /** @class */ (function (_super) {
    __extends(AwsSnsTopicProperty, _super);
    function AwsSnsTopicProperty(topicName, region, awsAccessCredentials) {
        var _this = _super.call(this, region, awsAccessCredentials) || this;
        _this.topicName = topicName;
        _this.region = region;
        _this.awsAccessCredentials = awsAccessCredentials;
        return _this;
    }
    return AwsSnsTopicProperty;
}(AwsServiceIntegrationProperty));

var ApplicationProperty = /** @class */ (function () {
    // ? due to eventBusProperty
    function ApplicationProperty(systemName, instanceName) {
        this.systemName = systemName;
        this.instanceName = instanceName;
        this.isDefault = false;
    }
    return ApplicationProperty;
}());

var ServiceIntegrationProperty = /** @class */ (function (_super) {
    __extends(ServiceIntegrationProperty, _super);
    function ServiceIntegrationProperty(systemName, instanceName) {
        var _this = _super.call(this, systemName, instanceName) || this;
        _this.systemName = systemName;
        _this.instanceName = instanceName;
        return _this;
    }
    return ServiceIntegrationProperty;
}(ApplicationProperty));

var GoogleCredential = /** @class */ (function (_super) {
    __extends(GoogleCredential, _super);
    function GoogleCredential(systemName, instanceName, projectNumber, applicationName) {
        if (projectNumber === void 0) { projectNumber = undefined; }
        if (applicationName === void 0) { applicationName = undefined; }
        return _super.call(this, systemName, instanceName) || this;
    }
    return GoogleCredential;
}(ServiceIntegrationProperty));

var GoogleApiCredential = /** @class */ (function (_super) {
    __extends(GoogleApiCredential, _super);
    function GoogleApiCredential(apiKey, systemName, instanceName) {
        var _this = _super.call(this, systemName, instanceName) || this;
        _this.apiKey = apiKey;
        return _this;
    }
    return GoogleApiCredential;
}(GoogleCredential));

var GoogleOAuthCredential = /** @class */ (function (_super) {
    __extends(GoogleOAuthCredential, _super);
    function GoogleOAuthCredential(clientId, clientSecret, systemName, instanceName) {
        var _this = _super.call(this, systemName, instanceName) || this;
        _this.clientId = clientId;
        _this.clientSecret = clientSecret;
        return _this;
    }
    return GoogleOAuthCredential;
}(GoogleCredential));

var GoogleServiceAccountCredential = /** @class */ (function (_super) {
    __extends(GoogleServiceAccountCredential, _super);
    function GoogleServiceAccountCredential(config, systemName, instanceName) {
        var _this = _super.call(this, systemName, instanceName) || this;
        _this.config = config;
        return _this;
    }
    return GoogleServiceAccountCredential;
}(GoogleCredential));

var MessagingProperty = /** @class */ (function (_super) {
    __extends(MessagingProperty, _super);
    function MessagingProperty(systemName, instanceName) {
        return _super.call(this, systemName, instanceName) || this;
    }
    return MessagingProperty;
}(ApplicationProperty));

var MessagingMechanismProperty = /** @class */ (function (_super) {
    __extends(MessagingMechanismProperty, _super);
    function MessagingMechanismProperty(systemName, instanceName) {
        return _super.call(this, systemName, instanceName) || this;
    }
    return MessagingMechanismProperty;
}(MessagingProperty));

var APNSProperties = /** @class */ (function (_super) {
    __extends(APNSProperties, _super);
    function APNSProperties(keyId, systemName, instanceName) {
        var _this = _super.call(this, systemName, instanceName) || this;
        _this.keyId = keyId;
        return _this;
    }
    return APNSProperties;
}(MessagingMechanismProperty));

var FCMProperties = /** @class */ (function (_super) {
    __extends(FCMProperties, _super);
    function FCMProperties(serverKey, systemName, instanceName) {
        var _this = _super.call(this, systemName, instanceName) || this;
        _this.serverKey = serverKey;
        return _this;
    }
    return FCMProperties;
}(MessagingMechanismProperty));

var OAuthIntegrationProperty = /** @class */ (function (_super) {
    __extends(OAuthIntegrationProperty, _super);
    /*/* in java it is extended but system and instance name are not passed*/
    function OAuthIntegrationProperty(oauthRedirectUrl, requireStateSigning, systemName, instanceName) {
        var _this = _super.call(this, systemName, instanceName) || this;
        _this.oauthRedirectUrl = oauthRedirectUrl;
        _this.requireStateSigning = requireStateSigning;
        return _this;
    }
    return OAuthIntegrationProperty;
}(ServiceIntegrationProperty));

var EventBusProperty = /** @class */ (function (_super) {
    __extends(EventBusProperty, _super);
    function EventBusProperty(active) {
        var _this = _super.call(this) || this;
        _this.active = active;
        return _this;
    }
    return EventBusProperty;
}(ApplicationProperty));
var AwsSqsQueueEventBus = /** @class */ (function (_super) {
    __extends(AwsSqsQueueEventBus, _super);
    function AwsSqsQueueEventBus(awsSqsQueueProperty, active) {
        var _this = _super.call(this, active) || this;
        _this.awsSqsQueueProperty = awsSqsQueueProperty;
        return _this;
    }
    return AwsSqsQueueEventBus;
}(EventBusProperty));
var AwsSnsTopicEventBus = /** @class */ (function (_super) {
    __extends(AwsSnsTopicEventBus, _super);
    function AwsSnsTopicEventBus(awsSnsTopicProperty, active) {
        var _this = _super.call(this, active) || this;
        _this.awsSnsTopicProperty = awsSnsTopicProperty;
        return _this;
    }
    return AwsSnsTopicEventBus;
}(EventBusProperty));

var TransactionalWebhookProperty = /** @class */ (function (_super) {
    __extends(TransactionalWebhookProperty, _super);
    function TransactionalWebhookProperty(webhookUri, eventSubscriptions) {
        if (eventSubscriptions === void 0) { eventSubscriptions = []; }
        var _this = _super.call(this) || this;
        _this.webhookUri = webhookUri;
        _this.eventSubscriptions = eventSubscriptions;
        return _this;
    }
    return TransactionalWebhookProperty;
}(ApplicationProperty));

var Central;
(function (Central) {
    Central["NewUserEvent"] = "mitter.mpe.users.NewUser";
    Central["ScreenNameChangedEvent"] = "mitter.mpe.users.ScreenNameChanged";
    Central["UserDeletedEvent"] = "mitter.mpe.users.UserDeleted";
    Central["UserLocatorAddedEvent"] = "mitter.mpe.users.UserLocatorAdded";
    Central["UserLocatorRemovedEvent"] = "mitter.mpe.users.UserLocatorRemoved";
    Central["UserTokenIssuedEvent"] = "mitter.mpe.users.UserTokenIssued";
    Central["UserTokenRevokedEvent"] = "mitter.mpe.users.UserTokenRevoked";
    Central["UserProfileAttributeDefCreatedEvent"] = "mitter.mpe.users.profiles.UserProfileAttributeDefCreatedEvent";
    Central["UserProfileModifiedEvent"] = "mitter.mpe.users.profiles.UserProfileModifiedEvent";
    Central["UserPresenceChangedEvent"] = "mitter.mpe.users.UserPresenceChanged";
    Central["NewFederatedUserEvent"] = "mitter.mpe.users.federation.NewFederatedUser";
    Central["FederatedUserLinkStateChangedEvent"] = "mitter.mpe.users.federation.FederatedUserLinkStateChanged";
    Central["SubscriberTokenIssuedEvent"] = "mitter.mpe.subscribers.SubscriberTokenIssued";
    Central["SubscriberTokenRevokedEvent"] = "mitter.mpe.subscribers.SubscriberTokenRevoked";
    Central["NewSubscriberEvent"] = "mitter.mpe.subscribers.NewSubscriber";
    Central["TokenIssuedEvent"] = "mitter.mpe.central.TokenIssuedEvent";
    Central["TokenRevokedEvent"] = "mitter.mpe.central.TokenRevokedEvent";
    Central["NewApplicationPropertyEvent"] = "mitter.mpe.applications.NewApplicationProperty";
    Central["ApplicationPropertyDeletedEvent"] = "mitter.mpe.applications.ApplicationPropertyDeleted";
    Central["ApplicationPropertyPatchedEvent"] = "mitter.mpe.applications.ApplicationPropertyPatched";
    Central["NewApplicationEvent"] = "mitter.mpe.applications.NewApplication";
    Central["NewApplicationAccessKeyEvent"] = "mitter.mpe.applications.NewApplicationAccessKey";
})(Central || (Central = {}));
var SystemEvent = /** @class */ (function () {
    function SystemEvent() {
    }
    return SystemEvent;
}());
var ApplicationEvent = /** @class */ (function () {
    function ApplicationEvent(application) {
        this.application = application;
    }
    return ApplicationEvent;
}());
var SubscriberEvent = /** @class */ (function () {
    function SubscriberEvent(subscriberId) {
        this.subscriberId = subscriberId;
    }
    return SubscriberEvent;
}());
var UserEvent = /** @class */ (function (_super) {
    __extends(UserEvent, _super);
    function UserEvent(userId, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.userId = userId;
        return _this;
    }
    return UserEvent;
}(ApplicationEvent));
var NewUserEvent = /** @class */ (function (_super) {
    __extends(NewUserEvent, _super);
    function NewUserEvent(user, applicationId) {
        var _this = _super.call(this, user.userId, applicationId) || this;
        _this.user = user;
        return _this;
    }
    return NewUserEvent;
}(UserEvent));
var ScreenNameChangedEvent = /** @class */ (function (_super) {
    __extends(ScreenNameChangedEvent, _super);
    function ScreenNameChangedEvent(oldScreenName, newScreenName, userId, applicationId) {
        var _this = _super.call(this, userId, applicationId) || this;
        _this.oldScreenName = oldScreenName;
        _this.newScreenName = newScreenName;
        return _this;
    }
    return ScreenNameChangedEvent;
}(UserEvent));
var UserDeletedEvent = /** @class */ (function (_super) {
    __extends(UserDeletedEvent, _super);
    function UserDeletedEvent(userId, applicationId) {
        return _super.call(this, userId, applicationId) || this;
    }
    return UserDeletedEvent;
}(UserEvent));
var UserLocatorAddedEvent = /** @class */ (function (_super) {
    __extends(UserLocatorAddedEvent, _super);
    function UserLocatorAddedEvent(userLocator, userId, applicationId) {
        var _this = _super.call(this, userId, applicationId) || this;
        _this.userLocator = userLocator;
        return _this;
    }
    return UserLocatorAddedEvent;
}(UserEvent));
var UserLocatorRemovedEvent = /** @class */ (function (_super) {
    __extends(UserLocatorRemovedEvent, _super);
    function UserLocatorRemovedEvent(userLocator, userId, applicationId) {
        var _this = _super.call(this, userId, applicationId) || this;
        _this.userLocator = userLocator;
        return _this;
    }
    return UserLocatorRemovedEvent;
}(UserEvent));
var UserTokenRevokedEvent = /** @class */ (function (_super) {
    __extends(UserTokenRevokedEvent, _super);
    function UserTokenRevokedEvent(tokenId, userId, applicationId) {
        var _this = _super.call(this, userId, applicationId) || this;
        _this.tokenId = tokenId;
        return _this;
    }
    return UserTokenRevokedEvent;
}(UserEvent));
var UserPresenceChangedEvent = /** @class */ (function (_super) {
    __extends(UserPresenceChangedEvent, _super);
    function UserPresenceChangedEvent(oldPresence, newPresence, userId, applicationId) {
        var _this = _super.call(this, userId, applicationId) || this;
        _this.oldPresence = oldPresence;
        _this.newPresence = newPresence;
        return _this;
    }
    return UserPresenceChangedEvent;
}(UserEvent));
var UserProfileAttributeDefCreatedEvent = /** @class */ (function (_super) {
    __extends(UserProfileAttributeDefCreatedEvent, _super);
    function UserProfileAttributeDefCreatedEvent(attributeDef, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.attributeDef = attributeDef;
        return _this;
    }
    return UserProfileAttributeDefCreatedEvent;
}(ApplicationEvent));
var UserProfileModifiedEvent = /** @class */ (function (_super) {
    __extends(UserProfileModifiedEvent, _super);
    function UserProfileModifiedEvent(userProfile, applicationId) {
        var _this = _super.call(this, userProfile.userId, applicationId) || this;
        _this.userProfile = userProfile;
        return _this;
    }
    return UserProfileModifiedEvent;
}(UserEvent));
var NewApplicationPropertyEvent = /** @class */ (function (_super) {
    __extends(NewApplicationPropertyEvent, _super);
    function NewApplicationPropertyEvent(applicationProperty, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.applicationProperty = applicationProperty;
        return _this;
    }
    return NewApplicationPropertyEvent;
}(ApplicationEvent));
var ApplicationPropertyDeletedEvent = /** @class */ (function (_super) {
    __extends(ApplicationPropertyDeletedEvent, _super);
    function ApplicationPropertyDeletedEvent(applicationProperty, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.applicationProperty = applicationProperty;
        return _this;
    }
    return ApplicationPropertyDeletedEvent;
}(ApplicationEvent));
var ApplicationPropertyPatchedEvent = /** @class */ (function (_super) {
    __extends(ApplicationPropertyPatchedEvent, _super);
    function ApplicationPropertyPatchedEvent(applicationProperty, isDefault, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.applicationProperty = applicationProperty;
        _this.isDefault = isDefault;
        return _this;
    }
    return ApplicationPropertyPatchedEvent;
}(ApplicationEvent));
var NewApplicationEvent = /** @class */ (function (_super) {
    __extends(NewApplicationEvent, _super);
    function NewApplicationEvent(application, subscriberId) {
        var _this = _super.call(this, subscriberId) || this;
        _this.application = application;
        return _this;
    }
    return NewApplicationEvent;
}(SubscriberEvent));
var NewApplicationAccessKeyEvent = /** @class */ (function (_super) {
    __extends(NewApplicationAccessKeyEvent, _super);
    function NewApplicationAccessKeyEvent(accessKey, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.accessKey = accessKey;
        return _this;
    }
    return NewApplicationAccessKeyEvent;
}(ApplicationEvent));
var ApplicationAccessKeyDeletedEvent = /** @class */ (function (_super) {
    __extends(ApplicationAccessKeyDeletedEvent, _super);
    function ApplicationAccessKeyDeletedEvent(accessKey, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.accessKey = accessKey;
        return _this;
    }
    return ApplicationAccessKeyDeletedEvent;
}(ApplicationEvent));
var SubscriberTokenIssuedEvent = /** @class */ (function (_super) {
    __extends(SubscriberTokenIssuedEvent, _super);
    function SubscriberTokenIssuedEvent(tokenId, subscriberId) {
        var _this = _super.call(this, subscriberId) || this;
        _this.tokenId = tokenId;
        return _this;
    }
    return SubscriberTokenIssuedEvent;
}(SubscriberEvent));
var SubscriberTokenRevokedEvent = /** @class */ (function (_super) {
    __extends(SubscriberTokenRevokedEvent, _super);
    function SubscriberTokenRevokedEvent(tokenId, subscriberId) {
        var _this = _super.call(this, subscriberId) || this;
        _this.tokenId = tokenId;
        return _this;
    }
    return SubscriberTokenRevokedEvent;
}(SubscriberEvent));
var NewSubscriberEvent = /** @class */ (function (_super) {
    __extends(NewSubscriberEvent, _super);
    function NewSubscriberEvent(subscriber) {
        var _this = _super.call(this) || this;
        _this.subscriber = subscriber;
        return _this;
    }
    return NewSubscriberEvent;
}(SystemEvent));
var TokenIssuedEvent = /** @class */ (function (_super) {
    __extends(TokenIssuedEvent, _super);
    function TokenIssuedEvent(tokenId, entityType) {
        var _this = _super.call(this) || this;
        _this.tokenId = tokenId;
        _this.entityType = entityType;
        return _this;
    }
    return TokenIssuedEvent;
}(SystemEvent));
var TokenRevokedEvent = /** @class */ (function (_super) {
    __extends(TokenRevokedEvent, _super);
    function TokenRevokedEvent(tokenId, entityType) {
        var _this = _super.call(this) || this;
        _this.tokenId = tokenId;
        _this.entityType = entityType;
        return _this;
    }
    return TokenRevokedEvent;
}(SystemEvent));

var DeliveryManagementNames;
(function (DeliveryManagementNames) {
    DeliveryManagementNames["PayloadDeliveryAttemptEvent"] = "mitter.mpe.delivery.PayloadDeliveryAttempt";
    DeliveryManagementNames["UserTargetDeliveryRequestedEvent"] = "mitter.mpe.delivery.UserTargetDeliveryRequested";
    DeliveryManagementNames["DeliveryEndpointRegisteredEvent"] = "mitter.mpe.delivery.DeliveryEndpointRegistered";
    DeliveryManagementNames["DeliveryEndpointUnregisteredEvent"] = "mitter.mpe.delivery.DeliveryEndpointUnregistered";
    DeliveryManagementNames["DeliveryEndpointTransferredEvent"] = "mitter.mpe.delivery.DeliveryEndpointTransferred";
})(DeliveryManagementNames || (DeliveryManagementNames = {}));
var PayloadDeliveryAttemptEvent = /** @class */ (function (_super) {
    __extends(PayloadDeliveryAttemptEvent, _super);
    function PayloadDeliveryAttemptEvent(serializedDeliveryEndpoint, deliveryResult, payload, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.serializedDeliveryEndpoint = serializedDeliveryEndpoint;
        _this.deliveryResult = deliveryResult;
        _this.payload = payload;
        return _this;
    }
    return PayloadDeliveryAttemptEvent;
}(ApplicationEvent));
var UserTargetDeliveryRequestedEvent = /** @class */ (function (_super) {
    __extends(UserTargetDeliveryRequestedEvent, _super);
    function UserTargetDeliveryRequestedEvent(user, messagingPipelinePayload, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.user = user;
        _this.messagingPipelinePayload = messagingPipelinePayload;
        return _this;
    }
    return UserTargetDeliveryRequestedEvent;
}(ApplicationEvent));
var DeliveryEndpointRegisteredEvent = /** @class */ (function (_super) {
    __extends(DeliveryEndpointRegisteredEvent, _super);
    function DeliveryEndpointRegisteredEvent(user, deliveryEndpoint, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.user = user;
        _this.deliveryEndpoint = deliveryEndpoint;
        return _this;
    }
    return DeliveryEndpointRegisteredEvent;
}(ApplicationEvent));
var DeliveryEndpointUnregisteredEvent = /** @class */ (function (_super) {
    __extends(DeliveryEndpointUnregisteredEvent, _super);
    function DeliveryEndpointUnregisteredEvent(user, deliveryEndpoint, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.user = user;
        _this.deliveryEndpoint = deliveryEndpoint;
        return _this;
    }
    return DeliveryEndpointUnregisteredEvent;
}(ApplicationEvent));
var DeliveryEndpointTransferredEvent = /** @class */ (function (_super) {
    __extends(DeliveryEndpointTransferredEvent, _super);
    function DeliveryEndpointTransferredEvent(deliveryEndponintId, oldOwner, newOwner, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.deliveryEndponintId = deliveryEndponintId;
        _this.oldOwner = oldOwner;
        _this.newOwner = newOwner;
        return _this;
    }
    return DeliveryEndpointTransferredEvent;
}(ApplicationEvent));

var MessagingPipelinePayload = /** @class */ (function () {
    function MessagingPipelinePayload(globalPipelinePayloadId, type) {
        this.globalPipelinePayloadId = globalPipelinePayloadId;
        this['@type'] = type;
    }
    return MessagingPipelinePayload;
}());
var SerializedMessagePipelinePayload = /** @class */ (function () {
    function SerializedMessagePipelinePayload(data) {
        this.data = data;
    }
    return SerializedMessagePipelinePayload;
}());

var StandardPipelinePayloadNames;
(function (StandardPipelinePayloadNames) {
    StandardPipelinePayloadNames["NewChannelPayload"] = "new-channel-payload";
    StandardPipelinePayloadNames["NewMessagePayload"] = "new-message-payload";
    StandardPipelinePayloadNames["NewMessageTimelineEventPayload"] = "new-message-timeline-event-payload";
    StandardPipelinePayloadNames["NewChannelTimelineEventPayload"] = "new-channel-timeline-event-payload";
    StandardPipelinePayloadNames["ParticipationChangedEventPayload"] = "participation-changed-event-payload";
    StandardPipelinePayloadNames["ChannelStreamData"] = "stream-data";
    StandardPipelinePayloadNames["PipelineControlPayload"] = "pipeline-control-payload";
})(StandardPipelinePayloadNames || (StandardPipelinePayloadNames = {}));
var NewChannelPayload = /** @class */ (function (_super) {
    __extends(NewChannelPayload, _super);
    function NewChannelPayload(channel, globalPipelinePayloadId, type) {
        var _this = _super.call(this, globalPipelinePayloadId, type) || this;
        _this.channel = channel;
        return _this;
    }
    return NewChannelPayload;
}(MessagingPipelinePayload));
var NewMessagePayload = /** @class */ (function (_super) {
    __extends(NewMessagePayload, _super);
    function NewMessagePayload(message, channelId, globalPipelinePayloadId, type) {
        var _this = _super.call(this, globalPipelinePayloadId, type) || this;
        _this.message = message;
        _this.channelId = channelId;
        return _this;
    }
    return NewMessagePayload;
}(MessagingPipelinePayload));
var NewMessageTimelineEventPayload = /** @class */ (function (_super) {
    __extends(NewMessageTimelineEventPayload, _super);
    function NewMessageTimelineEventPayload(timelineEvent, messageId, globalPipelinePayloadId, type) {
        var _this = _super.call(this, globalPipelinePayloadId, type) || this;
        _this.timelineEvent = timelineEvent;
        _this.messageId = messageId;
        return _this;
    }
    return NewMessageTimelineEventPayload;
}(MessagingPipelinePayload));
var NewChannelTimelineEventPayload = /** @class */ (function (_super) {
    __extends(NewChannelTimelineEventPayload, _super);
    function NewChannelTimelineEventPayload(timelineEvent, channelId, globalPipelinePayloadId, type) {
        var _this = _super.call(this, globalPipelinePayloadId, type) || this;
        _this.timelineEvent = timelineEvent;
        _this.channelId = channelId;
        return _this;
    }
    return NewChannelTimelineEventPayload;
}(MessagingPipelinePayload));
var ParticipationChangedEventPayload = /** @class */ (function (_super) {
    __extends(ParticipationChangedEventPayload, _super);
    function ParticipationChangedEventPayload(oldStatus, newStatus, participantId, channelId, globalPipelinePayloadId, type) {
        var _this = _super.call(this, globalPipelinePayloadId, type) || this;
        _this.oldStatus = oldStatus;
        _this.newStatus = newStatus;
        _this.participantId = participantId;
        _this.channelId = channelId;
        return _this;
    }
    return ParticipationChangedEventPayload;
}(MessagingPipelinePayload));
var ChannelStreamData = /** @class */ (function (_super) {
    __extends(ChannelStreamData, _super);
    function ChannelStreamData(channelId, streamId, streamData, globalPipelinePayloadId, type) {
        var _this = _super.call(this, globalPipelinePayloadId, type) || this;
        _this.channelId = channelId;
        _this.streamId = streamId;
        _this.streamData = streamData;
        return _this;
    }
    return ChannelStreamData;
}(MessagingPipelinePayload));
var PipelineControlPayload = /** @class */ (function (_super) {
    __extends(PipelineControlPayload, _super);
    function PipelineControlPayload(errorBody, allOk, globalPipelinePayloadId, type) {
        if (errorBody === void 0) { errorBody = undefined; }
        if (allOk === void 0) { allOk = false; }
        var _this = _super.call(this, globalPipelinePayloadId, type) || this;
        _this.errorBody = errorBody;
        _this.allOk = allOk;
        return _this;
    }
    return PipelineControlPayload;
}(MessagingPipelinePayload));

var StandardEndpointTypes;
(function (StandardEndpointTypes) {
    StandardEndpointTypes["FcmDeliveryEndpoint"] = "fcm";
    StandardEndpointTypes["TransactionalWebHook"] = "twh";
    StandardEndpointTypes["SseWebEndpoint"] = "http+sse";
})(StandardEndpointTypes || (StandardEndpointTypes = {}));
var DeliveryEndpoint = /** @class */ (function () {
    function DeliveryEndpoint(serializedEndpoint, endpointType, autoExpireAt) {
        if (autoExpireAt === void 0) { autoExpireAt = Number.MAX_SAFE_INTEGER; }
        this.serializedEndpoint = serializedEndpoint;
        this.endpointType = endpointType;
        this.autoExpireAt = autoExpireAt;
    }
    return DeliveryEndpoint;
}());
var FcmDeliveryEndpoint = /** @class */ (function (_super) {
    __extends(FcmDeliveryEndpoint, _super);
    function FcmDeliveryEndpoint(registrationToken) {
        var _this = _super.call(this, StandardEndpointTypes.FcmDeliveryEndpoint + ":" + registrationToken, StandardEndpointTypes.FcmDeliveryEndpoint) || this;
        _this.registrationToken = registrationToken;
        return _this;
    }
    return FcmDeliveryEndpoint;
}(DeliveryEndpoint));
var SseDeliveryEndpoint = /** @class */ (function (_super) {
    __extends(SseDeliveryEndpoint, _super);
    function SseDeliveryEndpoint(endpointToken) {
        if (endpointToken === void 0) { endpointToken = undefined; }
        var _this = _super.call(this, StandardEndpointTypes.SseWebEndpoint + ":" + endpointToken, StandardEndpointTypes.SseWebEndpoint) || this;
        _this.endpointToken = endpointToken;
        return _this;
    }
    return SseDeliveryEndpoint;
}(DeliveryEndpoint));
var TransactionalWebHookEndPoint = /** @class */ (function (_super) {
    __extends(TransactionalWebHookEndPoint, _super);
    function TransactionalWebHookEndPoint(webHookUri) {
        var _this = _super.call(this, StandardEndpointTypes.TransactionalWebHook + ":" + webHookUri, StandardEndpointTypes.TransactionalWebHook) || this;
        _this.webHookUri = webHookUri;
        return _this;
    }
    return TransactionalWebHookEndPoint;
}(DeliveryEndpoint));
var UserDeliveryEndPoint = /** @class */ (function () {
    function UserDeliveryEndPoint(userId, deliveryEndpoint, disabled) {
        if (disabled === void 0) { disabled = false; }
        this.userId = userId;
        this.deliveryEndpoint = deliveryEndpoint;
        this.disabled = disabled;
    }
    return UserDeliveryEndPoint;
}());

var DeliveryStatus;
(function (DeliveryStatus) {
    DeliveryStatus[DeliveryStatus["Success"] = 0] = "Success";
    DeliveryStatus[DeliveryStatus["PermanentFailure"] = 1] = "PermanentFailure";
    DeliveryStatus[DeliveryStatus["RetryableFailure"] = 2] = "RetryableFailure";
    DeliveryStatus[DeliveryStatus["Indeterminate"] = 3] = "Indeterminate";
})(DeliveryStatus || (DeliveryStatus = {}));
var DeliveryResult = /** @class */ (function () {
    function DeliveryResult(deliveryStatus) {
        this.deliveryStatus = deliveryStatus;
    }
    return DeliveryResult;
}());

var ChannelEvent = /** @class */ (function (_super) {
    __extends(ChannelEvent, _super);
    function ChannelEvent(channelId, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.channelId = channelId;
        return _this;
    }
    return ChannelEvent;
}(ApplicationEvent));
var NewChannelMessageEvent = /** @class */ (function (_super) {
    __extends(NewChannelMessageEvent, _super);
    function NewChannelMessageEvent(message, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.message = message;
        return _this;
    }
    return NewChannelMessageEvent;
}(ChannelEvent));
var ChannelMessageReadyEvent = /** @class */ (function (_super) {
    __extends(ChannelMessageReadyEvent, _super);
    function ChannelMessageReadyEvent(message, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.message = message;
        return _this;
    }
    return ChannelMessageReadyEvent;
}(ChannelEvent));
var NewChannelEvent = /** @class */ (function (_super) {
    __extends(NewChannelEvent, _super);
    function NewChannelEvent(channel, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.channel = channel;
        return _this;
    }
    return NewChannelEvent;
}(ChannelEvent));
var ChannelMessageDeletedEvent = /** @class */ (function (_super) {
    __extends(ChannelMessageDeletedEvent, _super);
    function ChannelMessageDeletedEvent(deletedMessage, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.deletedMessage = deletedMessage;
        return _this;
    }
    return ChannelMessageDeletedEvent;
}(ChannelEvent));
var ChannelDeletedEvent = /** @class */ (function (_super) {
    __extends(ChannelDeletedEvent, _super);
    function ChannelDeletedEvent(deletedChannel, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.deletedChannel = deletedChannel;
        return _this;
    }
    return ChannelDeletedEvent;
}(ChannelEvent));
var ChannelParticipatedAddedEvent = /** @class */ (function (_super) {
    __extends(ChannelParticipatedAddedEvent, _super);
    function ChannelParticipatedAddedEvent(channelParticipation, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.channelParticipation = channelParticipation;
        return _this;
    }
    return ChannelParticipatedAddedEvent;
}(ChannelEvent));
var ChannelParticipationModifiedEvent = /** @class */ (function (_super) {
    __extends(ChannelParticipationModifiedEvent, _super);
    function ChannelParticipationModifiedEvent(oldChannelParticipation, newChannelParticipation, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.oldChannelParticipation = oldChannelParticipation;
        _this.newChannelParticipation = newChannelParticipation;
        return _this;
    }
    return ChannelParticipationModifiedEvent;
}(ChannelEvent));
var ChannelParticipantDeletedEvent = /** @class */ (function (_super) {
    __extends(ChannelParticipantDeletedEvent, _super);
    function ChannelParticipantDeletedEvent(channelParticipation, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.channelParticipation = channelParticipation;
        return _this;
    }
    return ChannelParticipantDeletedEvent;
}(ChannelEvent));
var NewTimelineEventForMessageEvent = /** @class */ (function (_super) {
    __extends(NewTimelineEventForMessageEvent, _super);
    function NewTimelineEventForMessageEvent(timeLineEvent, messageId, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.timeLineEvent = timeLineEvent;
        _this.messageId = messageId;
        return _this;
    }
    return NewTimelineEventForMessageEvent;
}(ChannelEvent));
var NewTimelineEventForChannelEvent = /** @class */ (function (_super) {
    __extends(NewTimelineEventForChannelEvent, _super);
    function NewTimelineEventForChannelEvent(timeLineEvent, channelId, applicationId) {
        var _this = _super.call(this, channelId, applicationId) || this;
        _this.timeLineEvent = timeLineEvent;
        return _this;
    }
    return NewTimelineEventForChannelEvent;
}(ChannelEvent));
var NewTimelineEventEvent = /** @class */ (function (_super) {
    __extends(NewTimelineEventEvent, _super);
    function NewTimelineEventEvent(timeLineEvent, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.timeLineEvent = timeLineEvent;
        return _this;
    }
    return NewTimelineEventEvent;
}(ApplicationEvent));
var ChannelMessagesTruncatedEvent = /** @class */ (function (_super) {
    __extends(ChannelMessagesTruncatedEvent, _super);
    function ChannelMessagesTruncatedEvent(channelId, applicationId) {
        return _super.call(this, channelId, applicationId) || this;
    }
    return ChannelMessagesTruncatedEvent;
}(ChannelEvent));

var PacketTypes;
(function (PacketTypes) {
    PacketTypes["NEW_MESSAGE"] = "new-message";
    PacketTypes["NEW_CHAT"] = "new-chat";
    PacketTypes["NEW_RECEIPT"] = "new-receipt";
})(PacketTypes || (PacketTypes = {}));
var FcmPacket = /** @class */ (function () {
    function FcmPacket(payload, type, fcmDiscriminator) {
        this.payload = payload;
        this.type = type;
        this.fcmDiscriminator = fcmDiscriminator;
    }
    return FcmPacket;
}());

var MediaManagementEventNames;
(function (MediaManagementEventNames) {
    MediaManagementEventNames["HostedBinaryAvailableEvent"] = "mitter.mpe.media.HostedBinaryAvailable";
})(MediaManagementEventNames || (MediaManagementEventNames = {}));
var HostedBinaryAvailableEvent = /** @class */ (function (_super) {
    __extends(HostedBinaryAvailableEvent, _super);
    function HostedBinaryAvailableEvent(resourceUri, mediaKey, representation, mimeType, contentLength, applicationId) {
        var _this = _super.call(this, applicationId) || this;
        _this.resourceUri = resourceUri;
        _this.mediaKey = mediaKey;
        _this.representation = representation;
        _this.mimeType = mimeType;
        _this.contentLength = contentLength;
        _this.applicationId = applicationId;
        return _this;
    }
    return HostedBinaryAvailableEvent;
}(ApplicationEvent));

var StandardRuleSetNames;
(function (StandardRuleSetNames) {
    StandardRuleSetNames["DirectMessage"] = "io.mitter.ruleset.chats.DirectMessage";
    StandardRuleSetNames["GroupChat"] = "io.mitter.ruleset.chats.GroupChat";
    StandardRuleSetNames["SystemChannel"] = "io.mitter.ruleset.chats.SystemChannel";
    StandardRuleSetNames["SingleParticipantChannel"] = "io.mitter.ruleset.chats.SingleParticipantChannel";
})(StandardRuleSetNames || (StandardRuleSetNames = {}));
var ParticipationStatus;
(function (ParticipationStatus) {
    ParticipationStatus["Active"] = "Active";
    ParticipationStatus["ReadOnly"] = "ReadOnly";
    ParticipationStatus["Disabled"] = "Disabled";
})(ParticipationStatus || (ParticipationStatus = {}));
var Channel = /** @class */ (function () {
    function Channel(defaultRuleSet, participation, entityProfile, channelId, timelineEvents, appliedAcls, systemChannel, entityMetadata) {
        if (channelId === void 0) { channelId = null; }
        if (timelineEvents === void 0) { timelineEvents = []; }
        if (appliedAcls === void 0) { appliedAcls = { plusAppliedAcls: [], minusAppliedAcls: [] }; }
        if (systemChannel === void 0) { systemChannel = false; }
        if (entityMetadata === void 0) { entityMetadata = { metadata: [] }; }
        this.defaultRuleSet = defaultRuleSet;
        this.participation = participation;
        this.entityProfile = entityProfile;
        this.channelId = channelId;
        this.timelineEvents = timelineEvents;
        this.appliedAcls = appliedAcls;
        this.systemChannel = systemChannel;
        this.entityMetadata = entityMetadata;
    }
    Channel.prototype.identifier = function () {
        return this.channelId;
    };
    return Channel;
}());
var ChannelParticipation = /** @class */ (function () {
    function ChannelParticipation(participantId, participationStatus, channelId) {
        if (participationStatus === void 0) { participationStatus = ParticipationStatus.Active; }
        this.participantId = participantId;
        this.participationStatus = participationStatus;
        this.channelId = channelId;
    }
    return ChannelParticipation;
}());
var ParticipatedChannel = /** @class */ (function () {
    function ParticipatedChannel(participationStatus, channel) {
        this.participationStatus = participationStatus;
        this.channel = channel;
    }
    return ParticipatedChannel;
}());

var standardChannelProfileAttributes = {
    displayName: 'mitter.cpa.DisplayName',
    description: 'mitter.cpa.Description',
    channelIconURL: 'mitter.cpa.ChannelIconURL',
    purpose: 'mitter.cpa.Purpose'
};

var AuditFields = /** @class */ (function () {
    function AuditFields(creationTimeMs) {
        this.creationTimeMs = creationTimeMs;
    }
    return AuditFields;
}());

var ContextFreeMessage = /** @class */ (function () {
    function ContextFreeMessage(contextType, context, senderId, data) {
        this.contextType = contextType;
        this.context = context;
        this.senderId = senderId;
        this.data = data;
    }
    return ContextFreeMessage;
}());

var StandardPayloadTypeNames;
(function (StandardPayloadTypeNames) {
    StandardPayloadTypeNames["TextMessage"] = "mitter.mt.Text";
    StandardPayloadTypeNames["FormattedTextMessage"] = "mitter.mt.FormattedText";
    StandardPayloadTypeNames["LinkInsetTextMessage"] = "mitter.mt.LinkInsetText";
    StandardPayloadTypeNames["ImageMessage"] = "mitter.mt.Image";
    StandardPayloadTypeNames["EmptyMessage"] = "mitter.mt.Empty";
    StandardPayloadTypeNames["FileMessage"] = "mitter.mt.File";
})(StandardPayloadTypeNames || (StandardPayloadTypeNames = {}));
var StandardMessageType;
(function (StandardMessageType) {
    StandardMessageType["Standard"] = "Standard";
    StandardMessageType["Notification"] = "Notification";
    StandardMessageType["OutOfBand"] = "OutOfBand";
})(StandardMessageType || (StandardMessageType = {}));
var MessageDatum = /** @class */ (function () {
    function MessageDatum(dataType, data) {
        this.dataType = dataType;
        this.data = data;
    }
    return MessageDatum;
}());
var Message = /** @class */ (function () {
    function Message(senderId, textPayload, timelineEvents, messageData, appliedAcls, payloadType, messageId, messageType, entityMetaData) {
        if (messageData === void 0) { messageData = []; }
        if (payloadType === void 0) { payloadType = StandardPayloadTypeNames.TextMessage; }
        if (messageId === void 0) { messageId = null; }
        if (messageType === void 0) { messageType = StandardMessageType.Standard; }
        if (entityMetaData === void 0) { entityMetaData = { metadata: [] }; }
        this.senderId = senderId;
        this.textPayload = textPayload;
        this.timelineEvents = timelineEvents;
        this.messageData = messageData;
        this.appliedAcls = appliedAcls;
        this.payloadType = payloadType;
        this.messageId = messageId;
        this.messageType = messageType;
        this.entityMetaData = entityMetaData;
    }
    Message.prototype.identifier = function () {
        return this.messageId;
    };
    return Message;
}());
var ChannelReferencingMessage = /** @class */ (function () {
    function ChannelReferencingMessage(channelId, messageId, messageType, payloadType, senderId, textPayload, messageData, timelineEvents, entityMetaData) {
        if (messageType === void 0) { messageType = StandardMessageType.Standard; }
        if (payloadType === void 0) { payloadType = StandardPayloadTypeNames.TextMessage; }
        if (messageData === void 0) { messageData = []; }
        this.channelId = channelId;
        this.messageId = messageId;
        this.messageType = messageType;
        this.payloadType = payloadType;
        this.senderId = senderId;
        this.textPayload = textPayload;
        this.messageData = messageData;
        this.timelineEvents = timelineEvents;
        this.entityMetaData = entityMetaData;
    }
    ChannelReferencingMessage.prototype.identifier = function () {
        return this.messageId;
    };
    return ChannelReferencingMessage;
}());

// tslint:disable-next-line:variable-name
var ReservedMessageKeys = {
    ImageMessage: {
        ImageLink: 'link',
        ImageRepresentations: 'repr'
    },
    FileMessage: {
        FileLink: 'link',
        FileName: 'name'
    }
};

var Stream = /** @class */ (function () {
    function Stream(streamId, type, supportedContentTypes) {
        this.streamId = streamId;
        this.type = type;
        this.supportedContentTypes = supportedContentTypes;
    }
    Stream.prototype.identifier = function () {
        return this.streamId;
    };
    return Stream;
}());
var ChannelStream = /** @class */ (function () {
    function ChannelStream(channelId, stream) {
        this.channelId = channelId;
        this.stream = stream;
    }
    return ChannelStream;
}());

// tslint:disable-next-line:variable-name
var StandardTimeLineEventTypeNames = {
    CreationTime: 'io.mitter.types.timeline.CreationTime',
    messages: {
        SentTime: 'mitter.mtet.SentTime',
        ReceivedTime: 'mitter.mtet.ReceivedTime',
        DeliveredTime: 'mitter.mtet.DeliveredTime',
        ReadTime: 'mitter.mtet.ReadTime'
    }
};
var TimelineEvent = /** @class */ (function () {
    function TimelineEvent(type, eventTimeMs, subject, eventId) {
        if (eventId === void 0) { eventId = null; }
        this.type = type;
        this.eventTimeMs = eventTimeMs;
        this.subject = subject;
        this.eventId = eventId;
    }
    TimelineEvent.prototype.identifier = function () {
        return this.eventId;
    };
    return TimelineEvent;
}());

var MetadataEntry = /** @class */ (function () {
    function MetadataEntry(payload, systemEntry) {
        this.payload = payload;
        this.systemEntry = systemEntry;
    }
    return MetadataEntry;
}());
var EntityMetadata = /** @class */ (function () {
    function EntityMetadata(metadata) {
        this.metadata = metadata;
    }
    return EntityMetadata;
}());

var EntityProfileAttribute = /** @class */ (function () {
    function EntityProfileAttribute(key, contentType, contentEncoding, value) {
        this.key = key;
        this.contentType = contentType;
        this.contentEncoding = contentEncoding;
        this.value = value;
    }
    return EntityProfileAttribute;
}());
var EntityProfile = /** @class */ (function () {
    function EntityProfile(entityId, attributes) {
        this.entityId = entityId;
        this.attributes = attributes;
    }
    return EntityProfile;
}());

var EventLevel;
(function (EventLevel) {
    EventLevel[EventLevel["Action"] = 0] = "Action";
    EventLevel[EventLevel["Atomic"] = 1] = "Atomic";
})(EventLevel || (EventLevel = {}));
var NerifEvent = /** @class */ (function () {
    function NerifEvent(eventName, eventLevel) {
        this.eventName = eventName;
        this.eventLevel = eventLevel;
    }
    return NerifEvent;
}());

var Subscriber = /** @class */ (function () {
    function Subscriber(subscriberId, userName, firstName, lastName, email, mobile) {
        this.subscriberId = subscriberId;
        this.userName = userName;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.mobile = mobile;
    }
    Subscriber.prototype.identifier = function () {
        return this.subscriberId;
    };
    return Subscriber;
}());

var VerificationStatus;
(function (VerificationStatus) {
    VerificationStatus[VerificationStatus["Verified"] = 0] = "Verified";
    VerificationStatus[VerificationStatus["Unverified"] = 1] = "Unverified";
    VerificationStatus[VerificationStatus["StatusNotProvided"] = 2] = "StatusNotProvided";
    VerificationStatus[VerificationStatus["VerificationPending"] = 3] = "VerificationPending";
    VerificationStatus[VerificationStatus["VerificationApplicable"] = 4] = "VerificationApplicable";
})(VerificationStatus || (VerificationStatus = {}));

var UserLocator = /** @class */ (function () {
    function UserLocator(locatorSerializationPrefix, userLocatorId) {
        this.locatorSerializationPrefix = locatorSerializationPrefix;
        this.userLocatorId = userLocatorId;
        this.locatorSerializationPrefix = locatorSerializationPrefix;
        this.verificationStatus = VerificationStatus.StatusNotProvided;
    }
    UserLocator.prototype.locator = function () {
        return this.locatorSerializationPrefix + ":" + this.serializedLocator();
    };
    UserLocator.prototype.identifier = function () {
        return this.userLocatorId;
    };
    return UserLocator;
}());

var EmailUserLocator = /** @class */ (function (_super) {
    __extends(EmailUserLocator, _super);
    function EmailUserLocator(email, userLocatorId) {
        var _this = _super.call(this, EmailUserLocator.LOCATOR_SERIALIZED_PREFIX, userLocatorId) || this;
        _this.email = email;
        return _this;
    }
    EmailUserLocator.prototype.serializedLocator = function () {
        return this.email;
    };
    EmailUserLocator.LOCATOR_SERIALIZED_PREFIX = 'email';
    return EmailUserLocator;
}(UserLocator));

var MobileNumberLocator = /** @class */ (function (_super) {
    __extends(MobileNumberLocator, _super);
    function MobileNumberLocator(phoneNumber, userLocatorId) {
        var _this = _super.call(this, MobileNumberLocator.LOCATOR_SERIALIZED_PREFIX, userLocatorId) || this;
        _this.phoneNumber = phoneNumber;
        return _this;
    }
    MobileNumberLocator.prototype.serializedLocator = function () {
        return this.phoneNumber;
    };
    MobileNumberLocator.LOCATOR_SERIALIZED_PREFIX = 'tele';
    return MobileNumberLocator;
}(UserLocator));

var StandardUserPresenceTypeNames;
(function (StandardUserPresenceTypeNames) {
    StandardUserPresenceTypeNames["Online"] = "mitter.up.Online";
    StandardUserPresenceTypeNames["Sleeping"] = "mitter.up.Sleeping";
    StandardUserPresenceTypeNames["Away"] = "mitter.up.Away";
    StandardUserPresenceTypeNames["Missing"] = "mitter.up.Missing";
    StandardUserPresenceTypeNames["Offline"] = "mitter.up.Offline";
})(StandardUserPresenceTypeNames || (StandardUserPresenceTypeNames = {}));
var Presence = /** @class */ (function () {
    function Presence(type, timeToLive, expiresTo) {
        this.type = type;
        this.timeToLive = timeToLive;
        this.expiresTo = expiresTo;
    }
    return Presence;
}());

var standardUserProfileAttributes = {
    firstName: 'mitter.user.profile.attribute.FirstName',
    lastName: 'mitter.user.profile.attribute.LastName',
    avatarURL: 'mitter.upa.AvatarURL',
    mobile: 'mitter.upa.Mobile',
    dob: 'mitter.upa.DOB',
    bio: 'mitter.upa.Bio',
    gender: 'mitter.upa.Gender',
    email: 'mitter.upa.Email',
    street: 'mitter.upa.address.Street',
    city: 'mitter.upa.address.City',
    state: 'mitter.upa.address.State',
    zip: 'mitter.upa.address.Zip',
    country: 'mitter.upa.address.Country'
};
var AttributeDef = /** @class */ (function () {
    function AttributeDef(key, allowedContentTypes, allowedContentEncodings, canBeEmpty, entityType // users or channels
    ) {
        this.key = key;
        this.allowedContentTypes = allowedContentTypes;
        this.allowedContentEncodings = allowedContentEncodings;
        this.canBeEmpty = canBeEmpty;
        this.entityType = entityType;
    }
    return AttributeDef;
}());
var UserProfile = /** @class */ (function () {
    function UserProfile(userId, attributes) {
        this.userId = userId;
        this.attributes = attributes;
    }
    return UserProfile;
}());

var User = /** @class */ (function () {
    function User(userId, userLocators, screenName, systemUser, synthetic) {
        if (systemUser === void 0) { systemUser = false; }
        if (synthetic === void 0) { synthetic = false; }
        this.userId = userId;
        this.userLocators = userLocators;
        this.screenName = screenName;
        this.systemUser = systemUser;
        this.synthetic = synthetic;
    }
    User.prototype.identifier = function () {
        return this.userId;
    };
    return User;
}());

var GoogleOAuthConfig = /** @class */ (function () {
    function GoogleOAuthConfig(googleRedirectUriL, googleOAuthEndpoint, googleOAuthClientId, oauthRedirectUri, serviceActive) {
        this.googleRedirectUriL = googleRedirectUriL;
        this.googleOAuthEndpoint = googleOAuthEndpoint;
        this.googleOAuthClientId = googleOAuthClientId;
        this.oauthRedirectUri = oauthRedirectUri;
        this.serviceActive = serviceActive;
    }
    return GoogleOAuthConfig;
}());

var PayloadUri = /** @class */ (function () {
    function PayloadUri(payloadUri, uriContext) {
        this.payloadUri = payloadUri;
        this.uriContext = uriContext;
    }
    return PayloadUri;
}());

var SortOrder;
(function (SortOrder) {
    SortOrder[SortOrder["Ascending"] = 0] = "Ascending";
    SortOrder[SortOrder["Descending"] = 1] = "Descending";
    SortOrder[SortOrder["Implied"] = 2] = "Implied";
})(SortOrder || (SortOrder = {}));
var MessageQuery = /** @class */ (function () {
    /*AclAccessorSelector should be used instead of array*/
    function MessageQuery(channelId, limit, withReadSelectors, beforeMessageId, afterMessageId) {
        if (limit === void 0) { limit = 10; }
        this.channelId = channelId;
        this.limit = limit;
        this.withReadSelectors = withReadSelectors;
        this.beforeMessageId = beforeMessageId;
        this.afterMessageId = afterMessageId;
    }
    return MessageQuery;
}());
var AddableMessage = /** @class */ (function () {
    function AddableMessage(message) {
        this.message = message;
    }
    return AddableMessage;
}());
var ChannelMessageSet = /** @class */ (function () {
    function ChannelMessageSet(channelId, messages) {
        this.channelId = channelId;
        this.messages = messages;
    }
    return ChannelMessageSet;
}());
var ChannelMessage = /** @class */ (function () {
    function ChannelMessage(channelId, message) {
        this.channelId = channelId;
        this.message = message;
    }
    return ChannelMessage;
}());
var Paginated = /** @class */ (function () {
    function Paginated(data, estimatedTotalCount) {
        this.data = data;
        this.estimatedTotalCount = estimatedTotalCount;
    }
    return Paginated;
}());
var EntityQuery = /** @class */ (function () {
    /*AclAccessorSelector should be used instead of array*/
    function EntityQuery(beforeId, afterId, limit, entityCountOffset, sortOrder, withReadSelectors) {
        this.beforeId = beforeId;
        this.afterId = afterId;
        this.limit = limit;
        this.entityCountOffset = entityCountOffset;
        this.sortOrder = sortOrder;
        this.withReadSelectors = withReadSelectors;
    }
    return EntityQuery;
}());

var MessageTimelineEvent = /** @class */ (function () {
    function MessageTimelineEvent(messageId, timelineEvent, channelId) {
        this.messageId = messageId;
        this.timelineEvent = timelineEvent;
        this.channelId = channelId;
    }
    return MessageTimelineEvent;
}());
var MessageTimelineEventSet = /** @class */ (function () {
    function MessageTimelineEventSet(messageId, timelineEvents, channelId) {
        this.messageId = messageId;
        this.timelineEvents = timelineEvents;
        this.channelId = channelId;
    }
    return MessageTimelineEventSet;
}());
var ChannelTimelineEvent = /** @class */ (function () {
    function ChannelTimelineEvent(channelId, timelineEvent) {
        this.channelId = channelId;
        this.timelineEvent = timelineEvent;
    }
    return ChannelTimelineEvent;
}());
var ChannelTimelineEventSet = /** @class */ (function () {
    function ChannelTimelineEventSet(channelId, timelineEvents) {
        this.channelId = channelId;
        this.timelineEvents = timelineEvents;
    }
    return ChannelTimelineEventSet;
}());
var PatchChannelParticipation = /** @class */ (function () {
    function PatchChannelParticipation(newStatus) {
        this.newStatus = newStatus;
    }
    return PatchChannelParticipation;
}());
var PatchChannelParticipationResult = /** @class */ (function () {
    function PatchChannelParticipationResult(oldChannelParticipation, newChannelParticipation) {
        this.oldChannelParticipation = oldChannelParticipation;
        this.newChannelParticipation = newChannelParticipation;
    }
    return PatchChannelParticipationResult;
}());

var IssuedUserToken = /** @class */ (function () {
    function IssuedUserToken(userToken) {
        this.userToken = userToken;
    }
    return IssuedUserToken;
}());

var MitterErrorCodes;
(function (MitterErrorCodes) {
    MitterErrorCodes["ClaimRejected"] = "claim_rejected";
    MitterErrorCodes["EntityNotFound"] = "entity_not_found";
    MitterErrorCodes["AuthorizationException"] = "authorization_exception";
    MitterErrorCodes["MissingPrivilege"] = "missing_privilege";
    MitterErrorCodes["MissingContext"] = "missing_context";
})(MitterErrorCodes || (MitterErrorCodes = {}));

function fieldBasedPredicateGenerator$$1(field, value) {
    return function (target) {
        return target[field] === value;
    };
}
var PayloadTypes$$1 = /** @class */ (function () {
    function PayloadTypes$$1() {
    }
    PayloadTypes$$1.pipelinePayloadPredicateGenerator = function (typeSpecifier) {
        return fieldBasedPredicateGenerator$$1('@type', typeSpecifier);
    };
    PayloadTypes$$1.isPipelineControl = PayloadTypes$$1.pipelinePayloadPredicateGenerator(StandardPipelinePayloadNames.PipelineControlPayload);
    PayloadTypes$$1.isNewChannel = PayloadTypes$$1.pipelinePayloadPredicateGenerator(StandardPipelinePayloadNames.NewChannelPayload);
    PayloadTypes$$1.isNewMessage = PayloadTypes$$1.pipelinePayloadPredicateGenerator(StandardPipelinePayloadNames.NewMessagePayload);
    PayloadTypes$$1.isNewMessageTimelineEvent = PayloadTypes$$1.pipelinePayloadPredicateGenerator(StandardPipelinePayloadNames.NewMessageTimelineEventPayload);
    PayloadTypes$$1.isNewChannelTimelineEvent = PayloadTypes$$1.pipelinePayloadPredicateGenerator(StandardPipelinePayloadNames.NewChannelTimelineEventPayload);
    PayloadTypes$$1.isParticipationChanedEvent = PayloadTypes$$1.pipelinePayloadPredicateGenerator(StandardPipelinePayloadNames.ParticipationChangedEventPayload);
    PayloadTypes$$1.isChannelStreamData = PayloadTypes$$1.pipelinePayloadPredicateGenerator(StandardPipelinePayloadNames.ChannelStreamData);
    return PayloadTypes$$1;
}());
var ErrorTypes$$1 = /** @class */ (function () {
    function ErrorTypes$$1() {
    }
    ErrorTypes$$1.mitterErrorPayloadPredicateGenerator = function (typeSpecifier) {
        return fieldBasedPredicateGenerator$$1('errorCode', typeSpecifier);
    };
    ErrorTypes$$1.isClaimRejected = ErrorTypes$$1.mitterErrorPayloadPredicateGenerator(MitterErrorCodes.ClaimRejected);
    ErrorTypes$$1.isEntityNotFound = ErrorTypes$$1.mitterErrorPayloadPredicateGenerator(MitterErrorCodes.EntityNotFound);
    ErrorTypes$$1.isAuthorizationException = ErrorTypes$$1.mitterErrorPayloadPredicateGenerator(MitterErrorCodes.AuthorizationException);
    ErrorTypes$$1.isMissingPrivilege = ErrorTypes$$1.mitterErrorPayloadPredicateGenerator(MitterErrorCodes.MissingPrivilege);
    ErrorTypes$$1.isMissingContext = ErrorTypes$$1.mitterErrorPayloadPredicateGenerator(MitterErrorCodes.MissingContext);
    return ErrorTypes$$1;
}());
function getId$$1(input) {
    if (typeof input === 'string') {
        return input;
    }
    else {
        return input.identifier;
    }
}

export { AccessCredential, AccessCredentialStub, AccessKey, AccessSecret, Application, StandardApplicationProperty, AwsAccessCredentials, AwsServiceIntegrationProperty, AwsSnsTopicProperty, GoogleApiCredential, GoogleOAuthCredential, GoogleServiceAccountCredential, APNSProperties, FCMProperties, MessagingMechanismProperty, OAuthIntegrationProperty, AwsSqsQueueEventBus, AwsSnsTopicEventBus, TransactionalWebhookProperty, Central, ApplicationEvent, NewUserEvent, ScreenNameChangedEvent, UserDeletedEvent, UserLocatorAddedEvent, UserLocatorRemovedEvent, UserTokenRevokedEvent, UserPresenceChangedEvent, UserProfileAttributeDefCreatedEvent, UserProfileModifiedEvent, NewApplicationPropertyEvent, ApplicationPropertyDeletedEvent, ApplicationPropertyPatchedEvent, NewApplicationEvent, NewApplicationAccessKeyEvent, ApplicationAccessKeyDeletedEvent, SubscriberTokenIssuedEvent, SubscriberTokenRevokedEvent, NewSubscriberEvent, TokenIssuedEvent, TokenRevokedEvent, DeliveryManagementNames, PayloadDeliveryAttemptEvent, UserTargetDeliveryRequestedEvent, DeliveryEndpointRegisteredEvent, DeliveryEndpointUnregisteredEvent, DeliveryEndpointTransferredEvent, StandardPipelinePayloadNames, NewChannelPayload, NewMessagePayload, NewMessageTimelineEventPayload, NewChannelTimelineEventPayload, ParticipationChangedEventPayload, ChannelStreamData, PipelineControlPayload, MessagingPipelinePayload, SerializedMessagePipelinePayload, DeliveryEndpoint, FcmDeliveryEndpoint, SseDeliveryEndpoint, TransactionalWebHookEndPoint, UserDeliveryEndPoint, DeliveryResult, NewChannelMessageEvent, ChannelMessageReadyEvent, NewChannelEvent, ChannelMessageDeletedEvent, ChannelDeletedEvent, ChannelParticipatedAddedEvent, ChannelParticipationModifiedEvent, ChannelParticipantDeletedEvent, NewTimelineEventForMessageEvent, NewTimelineEventForChannelEvent, NewTimelineEventEvent, ChannelMessagesTruncatedEvent, PacketTypes, FcmPacket, MediaManagementEventNames, HostedBinaryAvailableEvent, StandardRuleSetNames, ParticipationStatus, Channel, ChannelParticipation, ParticipatedChannel, standardChannelProfileAttributes, AuditFields, ContextFreeMessage, StandardPayloadTypeNames, StandardMessageType, MessageDatum, Message, ChannelReferencingMessage, ReservedMessageKeys, Stream, ChannelStream, StandardTimeLineEventTypeNames, TimelineEvent, MetadataEntry, EntityMetadata, EntityProfileAttribute, EntityProfile, NerifEvent, Subscriber, UserLocator, EmailUserLocator, MobileNumberLocator, StandardUserPresenceTypeNames, Presence, standardUserProfileAttributes, AttributeDef, UserProfile, User, VerificationStatus, GoogleOAuthConfig, PayloadUri, MessageQuery, AddableMessage, ChannelMessageSet, ChannelMessage, Paginated, EntityQuery, MessageTimelineEvent, MessageTimelineEventSet, ChannelTimelineEvent, ChannelTimelineEventSet, PatchChannelParticipation, PatchChannelParticipationResult, IssuedUserToken, fieldBasedPredicateGenerator$$1 as fieldBasedPredicateGenerator, PayloadTypes$$1 as PayloadTypes, ErrorTypes$$1 as ErrorTypes, getId$$1 as getId };
//# sourceMappingURL=mitter-models.es5.js.map
