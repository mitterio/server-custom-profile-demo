import { ApplicationEvent } from './central';
import { DeliveryResult } from '../delman/delman-models';
import Identifiable from '../annotations/Identifiable';
import { User } from '../user/User';
import { MessagingPipelinePayload } from '../delman/chat/payloads';
export declare enum DeliveryManagementNames {
    PayloadDeliveryAttemptEvent = "mitter.mpe.delivery.PayloadDeliveryAttempt",
    UserTargetDeliveryRequestedEvent = "mitter.mpe.delivery.UserTargetDeliveryRequested",
    DeliveryEndpointRegisteredEvent = "mitter.mpe.delivery.DeliveryEndpointRegistered",
    DeliveryEndpointUnregisteredEvent = "mitter.mpe.delivery.DeliveryEndpointUnregistered",
    DeliveryEndpointTransferredEvent = "mitter.mpe.delivery.DeliveryEndpointTransferred"
}
export declare class PayloadDeliveryAttemptEvent extends ApplicationEvent {
    serializedDeliveryEndpoint: string;
    deliveryResult: DeliveryResult;
    payload: any;
    constructor(serializedDeliveryEndpoint: string, deliveryResult: DeliveryResult, payload: any, applicationId: string);
}
export declare class UserTargetDeliveryRequestedEvent extends ApplicationEvent {
    user: Identifiable<User>;
    messagingPipelinePayload: MessagingPipelinePayload;
    constructor(user: Identifiable<User>, messagingPipelinePayload: MessagingPipelinePayload, applicationId: string);
}
export declare class DeliveryEndpointRegisteredEvent extends ApplicationEvent {
    user: Identifiable<User>;
    deliveryEndpoint: string;
    constructor(user: Identifiable<User>, deliveryEndpoint: string, applicationId: string);
}
export declare class DeliveryEndpointUnregisteredEvent extends ApplicationEvent {
    user: Identifiable<User>;
    deliveryEndpoint: string;
    constructor(user: Identifiable<User>, deliveryEndpoint: string, applicationId: string);
}
export declare class DeliveryEndpointTransferredEvent extends ApplicationEvent {
    deliveryEndponintId: string;
    oldOwner: Identifiable<User>;
    newOwner: Identifiable<User>;
    constructor(deliveryEndponintId: string, oldOwner: Identifiable<User>, newOwner: Identifiable<User>, applicationId: string);
}
