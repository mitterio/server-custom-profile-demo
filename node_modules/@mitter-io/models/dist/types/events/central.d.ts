import { BaseEvent, Application, Subscriber, User, Presence, AttributeDef, UserProfile } from '../mitter-models';
import { UserLocator } from '../user/locators/UserLocator';
import ApplicationProperty from '../application/properties/ApplicationProperty';
export declare enum Central {
    NewUserEvent = "mitter.mpe.users.NewUser",
    ScreenNameChangedEvent = "mitter.mpe.users.ScreenNameChanged",
    UserDeletedEvent = "mitter.mpe.users.UserDeleted",
    UserLocatorAddedEvent = "mitter.mpe.users.UserLocatorAdded",
    UserLocatorRemovedEvent = "mitter.mpe.users.UserLocatorRemoved",
    UserTokenIssuedEvent = "mitter.mpe.users.UserTokenIssued",
    UserTokenRevokedEvent = "mitter.mpe.users.UserTokenRevoked",
    UserProfileAttributeDefCreatedEvent = "mitter.mpe.users.profiles.UserProfileAttributeDefCreatedEvent",
    UserProfileModifiedEvent = "mitter.mpe.users.profiles.UserProfileModifiedEvent",
    UserPresenceChangedEvent = "mitter.mpe.users.UserPresenceChanged",
    NewFederatedUserEvent = "mitter.mpe.users.federation.NewFederatedUser",
    FederatedUserLinkStateChangedEvent = "mitter.mpe.users.federation.FederatedUserLinkStateChanged",
    SubscriberTokenIssuedEvent = "mitter.mpe.subscribers.SubscriberTokenIssued",
    SubscriberTokenRevokedEvent = "mitter.mpe.subscribers.SubscriberTokenRevoked",
    NewSubscriberEvent = "mitter.mpe.subscribers.NewSubscriber",
    TokenIssuedEvent = "mitter.mpe.central.TokenIssuedEvent",
    TokenRevokedEvent = "mitter.mpe.central.TokenRevokedEvent",
    NewApplicationPropertyEvent = "mitter.mpe.applications.NewApplicationProperty",
    ApplicationPropertyDeletedEvent = "mitter.mpe.applications.ApplicationPropertyDeleted",
    ApplicationPropertyPatchedEvent = "mitter.mpe.applications.ApplicationPropertyPatched",
    NewApplicationEvent = "mitter.mpe.applications.NewApplication",
    NewApplicationAccessKeyEvent = "mitter.mpe.applications.NewApplicationAccessKey"
}
declare abstract class SystemEvent implements BaseEvent {
}
export declare abstract class ApplicationEvent implements BaseEvent {
    application: string;
    constructor(application: string);
}
declare abstract class SubscriberEvent implements BaseEvent {
    subscriberId: string;
    constructor(subscriberId: string);
}
declare abstract class UserEvent extends ApplicationEvent {
    userId: string;
    constructor(userId: string, applicationId: string);
}
export declare class NewUserEvent extends UserEvent {
    user: User;
    constructor(user: User, applicationId: string);
}
export declare class ScreenNameChangedEvent extends UserEvent {
    oldScreenName: string;
    newScreenName: string;
    constructor(oldScreenName: string, newScreenName: string, userId: string, applicationId: string);
}
export declare class UserDeletedEvent extends UserEvent {
    constructor(userId: string, applicationId: string);
}
export declare class UserLocatorAddedEvent extends UserEvent {
    userLocator: UserLocator;
    constructor(userLocator: UserLocator, userId: string, applicationId: string);
}
export declare class UserLocatorRemovedEvent extends UserEvent {
    userLocator: UserLocator;
    constructor(userLocator: UserLocator, userId: string, applicationId: string);
}
export declare class UserTokenRevokedEvent extends UserEvent {
    tokenId: string;
    constructor(tokenId: string, userId: string, applicationId: string);
}
export declare class UserPresenceChangedEvent extends UserEvent {
    oldPresence: Presence;
    newPresence: Presence;
    constructor(oldPresence: Presence, newPresence: Presence, userId: string, applicationId: string);
}
export declare class UserProfileAttributeDefCreatedEvent extends ApplicationEvent {
    attributeDef: AttributeDef;
    constructor(attributeDef: AttributeDef, applicationId: string);
}
export declare class UserProfileModifiedEvent extends UserEvent {
    userProfile: UserProfile;
    constructor(userProfile: UserProfile, applicationId: string);
}
export declare class NewApplicationPropertyEvent extends ApplicationEvent {
    applicationProperty: ApplicationProperty;
    constructor(applicationProperty: ApplicationProperty, applicationId: string);
}
export declare class ApplicationPropertyDeletedEvent extends ApplicationEvent {
    applicationProperty: ApplicationProperty;
    constructor(applicationProperty: ApplicationProperty, applicationId: string);
}
export declare class ApplicationPropertyPatchedEvent extends ApplicationEvent {
    applicationProperty: ApplicationProperty;
    isDefault: boolean;
    constructor(applicationProperty: ApplicationProperty, isDefault: boolean, applicationId: string);
}
export declare class NewApplicationEvent extends SubscriberEvent {
    application: Application;
    constructor(application: Application, subscriberId: string);
}
export declare class NewApplicationAccessKeyEvent extends ApplicationEvent {
    accessKey: string;
    constructor(accessKey: string, applicationId: string);
}
export declare class ApplicationAccessKeyDeletedEvent extends ApplicationEvent {
    accessKey: string;
    constructor(accessKey: string, applicationId: string);
}
export declare class SubscriberTokenIssuedEvent extends SubscriberEvent {
    tokenId: string;
    constructor(tokenId: string, subscriberId: string);
}
export declare class SubscriberTokenRevokedEvent extends SubscriberEvent {
    tokenId: string;
    constructor(tokenId: string, subscriberId: string);
}
export declare class NewSubscriberEvent extends SystemEvent {
    subscriber: Subscriber;
    constructor(subscriber: Subscriber);
}
export declare class TokenIssuedEvent extends SystemEvent {
    tokenId: string;
    entityType: string;
    constructor(tokenId: string, entityType: string);
}
export declare class TokenRevokedEvent extends SystemEvent {
    tokenId: string;
    entityType: string;
    constructor(tokenId: string, entityType: string);
}
export {};
