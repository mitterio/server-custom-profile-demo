import IdentifiableEntity from '../annotations/IdentifiableEntity';
import { TimelineEvent } from './TimelineEvents';
import { EntityMetadata } from '../entity/EntityMetadata';
import { EntityProfile } from '../entity/EntityProfile';
import { Identifier } from '../annotations/Identifier';
import { PickedPartial } from '../utils/PickedPartial';
import { AppliedAclList } from '../acolyte/AppliedAclList';
export declare enum StandardRuleSetNames {
    DirectMessage = "io.mitter.ruleset.chats.DirectMessage",
    GroupChat = "io.mitter.ruleset.chats.GroupChat",
    SystemChannel = "io.mitter.ruleset.chats.SystemChannel",
    SingleParticipantChannel = "io.mitter.ruleset.chats.SingleParticipantChannel"
}
export declare enum ParticipationStatus {
    Active = "Active",
    ReadOnly = "ReadOnly",
    Disabled = "Disabled"
}
export declare class Channel implements IdentifiableEntity<Channel> {
    defaultRuleSet: string;
    participation: Array<ChannelParticipation>;
    entityProfile: EntityProfile;
    channelId: string | null;
    timelineEvents: Array<TimelineEvent>;
    appliedAcls: AppliedAclList;
    systemChannel: boolean;
    entityMetadata: EntityMetadata;
    constructor(defaultRuleSet: string, participation: Array<ChannelParticipation>, entityProfile: EntityProfile, channelId?: string | null, timelineEvents?: Array<TimelineEvent>, appliedAcls?: AppliedAclList, systemChannel?: boolean, entityMetadata?: EntityMetadata);
    identifier(): string;
}
declare type RequiredChannelParams = 'defaultRuleSet' | 'participation';
export declare type RequestChannel = PickedPartial<Channel, RequiredChannelParams>;
export declare class ChannelParticipation {
    participantId: Identifier | string;
    participationStatus: ParticipationStatus;
    channelId: Identifier | string;
    constructor(participantId: Identifier | string, participationStatus: ParticipationStatus, channelId: Identifier | string);
}
export declare class ParticipatedChannel {
    participationStatus: ParticipationStatus;
    channel: Channel;
    constructor(participationStatus: ParticipationStatus, channel: Channel);
}
export {};
