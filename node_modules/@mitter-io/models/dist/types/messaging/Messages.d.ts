import { TimelineEvent } from './TimelineEvents';
import { EntityMetadata, MetadataAttachable } from '../entity/EntityMetadata';
import IdentifiableEntity from '../annotations/IdentifiableEntity';
import { AppliedAclList } from '../acolyte/AppliedAclList';
import { Identifier } from '../annotations/Identifier';
import { PickedPartial } from '../utils/PickedPartial';
export declare enum StandardPayloadTypeNames {
    TextMessage = "mitter.mt.Text",
    FormattedTextMessage = "mitter.mt.FormattedText",
    LinkInsetTextMessage = "mitter.mt.LinkInsetText",
    ImageMessage = "mitter.mt.Image",
    EmptyMessage = "mitter.mt.Empty",
    FileMessage = "mitter.mt.File"
}
export declare enum StandardMessageType {
    Standard = "Standard",
    Notification = "Notification",
    OutOfBand = "OutOfBand"
}
export declare class MessageDatum {
    dataType: string;
    data: {
        [key: string]: any;
    };
    constructor(dataType: string, data: {
        [key: string]: any;
    });
}
export declare class Message implements IdentifiableEntity<Message>, MetadataAttachable {
    senderId: Identifier | string;
    textPayload: string;
    timelineEvents: Array<TimelineEvent>;
    messageData: Array<MessageDatum>;
    appliedAcls: AppliedAclList;
    payloadType: string;
    messageId: string | null;
    messageType: StandardMessageType;
    entityMetaData: EntityMetadata;
    constructor(senderId: Identifier | string, textPayload: string, timelineEvents: Array<TimelineEvent>, messageData: Array<MessageDatum>, appliedAcls: AppliedAclList, payloadType?: string, messageId?: string | null, messageType?: StandardMessageType, entityMetaData?: EntityMetadata);
    identifier(): string;
}
declare type RequiredMessageParams = 'senderId' | 'textPayload' | 'timelineEvents';
export declare type RequestMessage = PickedPartial<Message, RequiredMessageParams>;
export declare class ChannelReferencingMessage implements IdentifiableEntity<Message>, MetadataAttachable {
    channelId: string;
    messageId: string;
    messageType: StandardMessageType;
    payloadType: string;
    senderId: Identifier;
    textPayload: string;
    messageData: Array<MessageDatum>;
    timelineEvents: Array<TimelineEvent>;
    entityMetaData: EntityMetadata;
    constructor(channelId: string, messageId: string, messageType: StandardMessageType, payloadType: string, senderId: Identifier, textPayload: string, messageData: Array<MessageDatum>, timelineEvents: Array<TimelineEvent>, entityMetaData: EntityMetadata);
    identifier(): string;
}
export {};
