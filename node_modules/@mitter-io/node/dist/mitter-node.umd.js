'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));
var crypto = _interopDefault(require('crypto'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics$1 = function(d, b) {
    extendStatics$1 = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics$1(d, b);
};

function __extends$1(d, b) {
    extendStatics$1(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter$1(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator$1(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var MitterAxiosApiInterceptor = /** @class */ (function () {
    function MitterAxiosApiInterceptor(applicationId, genericInterceptor, mitterApiBaseUrl) {
        this.applicationId = applicationId;
        this.genericInterceptor = genericInterceptor;
        this.mitterApiBaseUrl = mitterApiBaseUrl;
        // tslint:disable-next-line:variable-name
        this.mitterAxiosRequestInterceptor = axios.interceptors.request;
        this.mitterAxiosResponseInterceptor = axios.interceptors.response;
    }
    MitterAxiosApiInterceptor.prototype.requestInterceptor = function (config) {
        if (this.interceptFilter(config.baseURL)) {
            this.genericInterceptor({
                data: config.data,
                path: config.url,
                headers: config.headers,
                method: config.method
            });
            return config;
        }
        return config;
    };
    MitterAxiosApiInterceptor.prototype.responseInterceptor = function (response) {
        if (this.interceptFilter(response.config.url)) {
            return response;
        }
        else {
            return response;
        }
    };
    MitterAxiosApiInterceptor.prototype.responseErrorInterceptor = function (error) {
        /*
        if (error!!.response!!.status === 401 && error.code === 'claim_rejected') {
            if (this.onTokenExpireExecutor !== undefined) {
                this.onTokenExpireExecutor()
            }
        }
        */
        return Promise.reject(error);
    };
    MitterAxiosApiInterceptor.prototype.enable = function (axiosInstance) {
        var _this = this;
        if (axiosInstance !== undefined) {
            axiosInstance.interceptors.request.use(function (config) {
                return _this.requestInterceptor(config);
            });
            axiosInstance.interceptors.response.use(function (response) { return _this.responseInterceptor(response); }, function (error) { return _this.responseErrorInterceptor(error); });
        }
        else {
            this.mitterAxiosRequestInterceptor.use(function (config) {
                return _this.requestInterceptor(config);
            });
            this.mitterAxiosResponseInterceptor.use(function (response) { return _this.responseInterceptor(response); }, function (error) { return _this.responseErrorInterceptor(error); });
        }
    };
    MitterAxiosApiInterceptor.prototype.disable = function (axiosInstance) {
        if (axiosInstance !== undefined) {
            axiosInstance.interceptors.request.eject(3);
            axiosInstance.interceptors.response.eject(3);
        }
        else {
            this.mitterAxiosRequestInterceptor.eject(1);
            this.mitterAxiosResponseInterceptor.eject(2);
        }
    };
    MitterAxiosApiInterceptor.prototype.interceptFilter = function (url) {
        return url.startsWith(this.mitterApiBaseUrl);
    };
    return MitterAxiosApiInterceptor;
}());

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var dist = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var TypedAxios = axios.default;
exports.default = TypedAxios;

});

var axios$1 = unwrapExports(dist);

function clientGenerator() {
    return function (mitterAxiosInterceptionHost) {
        var client = axios$1.create({
            baseURL: mitterAxiosInterceptionHost.mitterApiBaseUrl
        });
        mitterAxiosInterceptionHost.enableAxiosInterceptor(client);
        return client;
    };
}

// tslint:disable-next-line:variable-name
var MitterConstants = {
    // MitterApiUrl: 'https://api.mitter.io',
    MitterApiUrl: 'https://api.mitter.io',
    MitterApiStagingUrl: 'https://api.staging.mitter.io',
    Api: {
        VersionPrefix: '/v1'
    }
};
var channelsClientGenerator = clientGenerator();
var ChannelsClient = /** @class */ (function () {
    function ChannelsClient(mitterAxiosInterceptionHost) {
        this.mitterAxiosInterceptionHost = mitterAxiosInterceptionHost;
        this.channelsAxiosClient = channelsClientGenerator(mitterAxiosInterceptionHost);
    }
    ChannelsClient.prototype.newChannel = function (channel) {
        return this.channelsAxiosClient
            .post('/v1/channels', channel)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.getAllChannels = function (before, after, limit) {
        if (before === void 0) { before = undefined; }
        if (after === void 0) { after = undefined; }
        if (limit === void 0) { limit = 45; }
        return this.channelsAxiosClient
            .get('/v1/channels', {
            params: Object.assign({}, after !== undefined ? { after: after } : {}, before !== undefined ? { before: before } : {}, limit !== undefined ? { limit: limit } : {})
        })
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.getChannel = function (channelId) {
        return this.channelsAxiosClient
            .get("/v1/channels/" + channelId)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.participatedChannels = function () {
        return this.channelsAxiosClient
            .get('/v1/users/me/channels')
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.deleteChannel = function (channelId) {
        return this.channelsAxiosClient
            .delete("/v1/channels/" + channelId)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.getChannelParticipants = function (channelId) {
        return this.channelsAxiosClient
            .get("/v1/channels/" + channelId + "/participants")
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.addParticipantToChannel = function (channelId, channelParticipation) {
        return this.channelsAxiosClient
            .post("/v1/channels/" + channelId + "/participants", channelParticipation)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.deleteParticipantFromChannel = function (channelId, participantId) {
        return this.channelsAxiosClient
            .delete("/v1/channels/" + channelId + "/participants/" + participantId)
            .then(function (x) { return x.data; });
    };
    ChannelsClient.prototype.deleteAllMessages = function (channelId) {
        return this.channelsAxiosClient
            .delete("v1/channels/" + channelId + "/messages")
            .then(function (x) { return x.data; });
    };
    return ChannelsClient;
}());
var messagesClientGenerator = clientGenerator();
var MessagesClient = /** @class */ (function () {
    function MessagesClient(mitterAxiosInterceptionHost) {
        this.mitterAxiosInterceptionHost = mitterAxiosInterceptionHost;
        this.messagesAxiosClient = messagesClientGenerator(mitterAxiosInterceptionHost);
    }
    MessagesClient.prototype.sendMessage = function (channelId, message) {
        return this.messagesAxiosClient
            .post("/v1/channels/" + encodeURIComponent(channelId) + "/messages", message)
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.getMessage = function (messageId) {
        return this.messagesAxiosClient
            .get("/v1/messages/" + messageId)
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.getMessages = function (channelId, before, after, limit) {
        if (before === void 0) { before = undefined; }
        if (after === void 0) { after = undefined; }
        if (limit === void 0) { limit = 45; }
        return this.messagesAxiosClient
            .get("/v1/channels/" + channelId + "/messages", {
            params: Object.assign({}, after !== undefined ? { after: after } : {}, before !== undefined ? { before: before } : {}, limit !== undefined ? { limit: limit } : {})
        })
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.getMessageTimelineEvent = function (channelId, messageIds) {
        return this.messagesAxiosClient
            .get("/v1/channels/" + channelId + "/messages/" + messageIds + "/timeline")
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.addMessageTimelineEvent = function (channelId, messageIds, timelineEvent) {
        return this.messagesAxiosClient
            .post("/v1/channels/" + channelId + "/messages/" + messageIds + "/timeline", timelineEvent)
            .then(function (x) { return x.data; });
    };
    MessagesClient.prototype.deleteMessages = function (channelId, messageIds) {
        return this.messagesAxiosClient
            .delete("v1/channels/" + channelId + "/messages/" + messageIds)
            .then(function (x) { return x.data; });
    };
    return MessagesClient;
}());
var usersClientGenerator = clientGenerator();
var UsersClient = /** @class */ (function () {
    function UsersClient(mitterAxiosInterceptionHost) {
        this.mitterAxiosInterceptionHost = mitterAxiosInterceptionHost;
        this.usersAxiosClient = usersClientGenerator(mitterAxiosInterceptionHost);
    }
    UsersClient.prototype.createUser = function (user) {
        return this.usersAxiosClient.post('/v1/users', user).then(function (x) { return x.data; });
    };
    UsersClient.prototype.getUsers = function (locators) {
        if (locators === void 0) { locators = undefined; }
        return this.usersAxiosClient
            .get('/v1/users', {
            params: Object.assign({}, locators === undefined ? { sandboxed: true } : {}, locators !== undefined ? { locators: locators } : {})
        })
            .then(function (x) { return x.data; });
    };
    UsersClient.prototype.getUser = function (userId) {
        return this.usersAxiosClient
            .get("/v1/users/" + userId)
            .then(function (x) { return x.data; });
    };
    UsersClient.prototype.setUserPresence = function (userId, userPresence) {
        return this.usersAxiosClient
            .post("/v1/users/" + userId + "/presence", userPresence)
            .then(function (x) { return x.data; });
    };
    UsersClient.prototype.getUserPresence = function (userId) {
        return this.usersAxiosClient
            .get("/v1/users/" + userId + "/presence")
            .then(function (x) { return x.data; });
    };
    UsersClient.prototype.addUserLocator = function (userId, locator) {
        return this.usersAxiosClient
            .post("/v1/users/" + userId + "/locators", locator)
            .then(function (x) { return x.data; });
    };
    UsersClient.prototype.logout = function () {
        return this.usersAxiosClient
            .get("/v1/users/me/logout")
            .then(function (x) { return x.data; });
    };
    UsersClient.prototype.addUserDeliveryEndpoint = function (deliveryEndpoint) {
        return this.usersAxiosClient
            .post("/v1/users/me/delivery-endpoints", deliveryEndpoint)
            .then(function (x) { return x.data; });
    };
    UsersClient.prototype.deleteUserDeliveryEndpoint = function (serializedEndpoint) {
        return this.usersAxiosClient
            .delete("/v1/users/me/delivery-endpoints/" + serializedEndpoint)
            .then(function (x) { return x.data; });
    };
    return UsersClient;
}());

var userTokensClientGenerator = clientGenerator();
var UserTokensClient = /** @class */ (function () {
    function UserTokensClient(mitterAxiosInterceptionHost) {
        this.mitterAxiosInterceptionHost = mitterAxiosInterceptionHost;
        this.userTokensAxiosClient = userTokensClientGenerator(mitterAxiosInterceptionHost);
    }
    UserTokensClient.prototype.getUserToken = function (userId) {
        return this.userTokensAxiosClient
            .post("/v1/users/" + userId + "/tokens")
            .then(function (x) { return x.data; });
    };
    return UserTokensClient;
}());

var MitterClientSet = /** @class */ (function () {
    function MitterClientSet(mitterAxiosInterceptionHost) {
        this.mitterAxiosInterceptionHost = mitterAxiosInterceptionHost;
        this.cachedClients = {};
    }
    MitterClientSet.prototype.channels = function () {
        return this.client(ChannelsClient);
    };
    MitterClientSet.prototype.messages = function () {
        return this.client(MessagesClient);
    };
    MitterClientSet.prototype.users = function () {
        return this.client(UsersClient);
    };
    MitterClientSet.prototype.userAuth = function () {
        return this.client(UserTokensClient);
    };
    MitterClientSet.prototype.client = function (clientConstructor) {
        if (!(clientConstructor.name in this.cachedClients)) {
            this.cachedClients[clientConstructor.name] = new clientConstructor(this.mitterAxiosInterceptionHost);
        }
        return this.cachedClients[clientConstructor.name];
    };
    return MitterClientSet;
}());

function statefulPromise() {
    var _resolve = undefined;
    var _reject = undefined;
    var promise = new Promise(function (resolve, reject) {
        _resolve = resolve;
        _reject = reject;
    });
    promise.resolve = _resolve;
    promise.reject = _reject;
    promise.connect = function (outer) {
        outer.then(function (t) { return _resolve(t); }).catch(function (e) { return _reject(e); });
    };
    return promise;
}

// tslint:disable-next-line:no-empty
var noOp = function () { };

var SavedDeliveryEndpoints = /** @class */ (function () {
    function SavedDeliveryEndpoints(deliveryEndpoints) {
        if (deliveryEndpoints === void 0) { deliveryEndpoints = {}; }
        this.deliveryEndpoints = deliveryEndpoints;
    }
    return SavedDeliveryEndpoints;
}());
var MessagingPipelineDriverHost = /** @class */ (function () {
    function MessagingPipelineDriverHost(pipelineDrivers, mitterContext, kvStore, onAllPipelinesInitialized) {
        if (kvStore === void 0) { kvStore = undefined; }
        if (onAllPipelinesInitialized === void 0) { onAllPipelinesInitialized = function () { }; }
        var _this = this;
        this.mitterContext = mitterContext;
        this.kvStore = kvStore;
        this.onAllPipelinesInitialized = onAllPipelinesInitialized;
        this.savedDeliveryEndpoints = new SavedDeliveryEndpoints();
        this.subscriptions = [];
        if (pipelineDrivers instanceof Array) {
            this.pipelineDrivers = pipelineDrivers;
        }
        else {
            this.pipelineDrivers = [pipelineDrivers];
        }
        this.mitterContext.userAuthorizationAvailable(function () { return _this.refresh(); });
    }
    MessagingPipelineDriverHost.prototype.subscribe = function (messageSink) {
        this.subscriptions.push(messageSink);
    };
    MessagingPipelineDriverHost.prototype.refresh = function () {
        var _this = this;
        this.loadStoredEndpoints().then(function () {
            return _this.initializeMessagingPipelines()
                .then(function () {
                _this.onAllPipelinesInitialized();
            })
                .catch(function (e) {
                _this.onAllPipelinesInitialized(e);
            });
        });
    };
    MessagingPipelineDriverHost.prototype.loadStoredEndpoints = function () {
        return __awaiter$1(this, void 0, void 0, function () {
            var savedDeliveryEndpoints;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.savedDeliveryEndpoints = new SavedDeliveryEndpoints();
                        if (this.kvStore === undefined) {
                            console.warn('You are not using a store for persisting delivery endpoints.' +
                                ' This might cause your users to very quickly hit provisioning limits on their endpoints');
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.kvStore.getItem(MessagingPipelineDriverHost.StoreKeys.SavedDeliveryEndpoints)];
                    case 1:
                        savedDeliveryEndpoints = _a.sent();
                        if (savedDeliveryEndpoints !== undefined) {
                            this.savedDeliveryEndpoints = savedDeliveryEndpoints;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MessagingPipelineDriverHost.prototype.initializeMessagingPipelines = function () {
        return __awaiter$1(this, void 0, void 0, function () {
            var pipelineInits;
            var _this = this;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pipelineInits = [];
                        return [4 /*yield*/, this.pipelineDrivers.forEach(function (driver) { return __awaiter$1(_this, void 0, void 0, function () {
                                var driverInitialized, driverSpec, _a, initialized, pipelineDriverSpec, ex_1, preProvisionPromise;
                                var _this = this;
                                return __generator$1(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 3]);
                                            return [4 /*yield*/, driver.initialize(this.mitterContext)];
                                        case 1:
                                            _a = _b.sent(), initialized = _a.initialized, pipelineDriverSpec = _a.pipelineDriverSpec;
                                            driverInitialized = initialized;
                                            pipelineInits.push(driverInitialized);
                                            driverSpec = pipelineDriverSpec;
                                            return [3 /*break*/, 3];
                                        case 2:
                                            ex_1 = _b.sent();
                                            console.log('Unable to initialize pipeline driver', ex_1);
                                            throw ex_1;
                                        case 3:
                                            console.log("Initializing pipeline driver '" + driverSpec.name + "'");
                                            preProvisionPromise = Promise.resolve(undefined);
                                            if (driverSpec.name in this.savedDeliveryEndpoints.deliveryEndpoints) {
                                                preProvisionPromise = this.syncEndpoint(this.savedDeliveryEndpoints.deliveryEndpoints[driverSpec.name]);
                                                console.log("Found an endpoint already present for " + driverSpec.name + ". If invalid, it will be re-provisioned");
                                            }
                                            preProvisionPromise.then(function (syncedEndpoint) {
                                                var operatingEndpoint;
                                                if (syncedEndpoint === undefined) {
                                                    console.log('The endpoint on sync was determined to be invalid, refreshing');
                                                    operatingEndpoint = driverInitialized
                                                        .then(function () { return driver.getDeliveryEndpoint(); })
                                                        .then(function (deliveryEndpoint) {
                                                        if (deliveryEndpoint !== undefined) {
                                                            _this.registerEndpoint(driverSpec, deliveryEndpoint).then(function (provisionedEndpoint) { return provisionedEndpoint; });
                                                        }
                                                        else {
                                                            return undefined;
                                                        }
                                                    })
                                                        .catch(function (e) {
                                                        console.warn("Could not instantiate pipeline driver " + driverSpec.name, e);
                                                        throw e;
                                                    });
                                                }
                                                else {
                                                    console.log('The endpoint on sync was determined to be valid. Continuing with the same');
                                                    operatingEndpoint = Promise.resolve(syncedEndpoint);
                                                }
                                                operatingEndpoint.then(function (endpoint) {
                                                    if (endpoint !== undefined) {
                                                        _this.announceSinkForDriver(driver, endpoint, _this.generatePipelineSink(driverSpec));
                                                    }
                                                    else {
                                                        if (driver.pipelineSinkChanged !== undefined) {
                                                            driver.pipelineSinkChanged(_this.generateStatelessPipelineSink(driverSpec));
                                                        }
                                                    }
                                                });
                                            });
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, Promise.all(pipelineInits)];
                }
            });
        });
    };
    MessagingPipelineDriverHost.prototype.announceSinkForDriver = function (driver, endpoint, pipelineSink) {
        driver.endpointRegistered(pipelineSink, endpoint);
        if (driver.pipelineSinkChanged !== undefined) {
            driver.pipelineSinkChanged(pipelineSink);
        }
    };
    MessagingPipelineDriverHost.prototype.syncEndpoint = function (deliveryEndpoint) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, fetch(this.mitterContext.mitterApiBaseUrl + "/v1/users/me/delivery-endpoints/" + deliveryEndpoint.serializedEndpoint)
                        .then(function (resp) {
                        return resp.json;
                    })
                        .then(function (resp) {
                        return resp;
                    })
                        .catch(function () {
                        return undefined;
                    })];
            });
        });
    };
    MessagingPipelineDriverHost.prototype.registerEndpoint = function (driverSpec, deliveryEndpoint) {
        var _this = this;
        return fetch(this.mitterContext.mitterApiBaseUrl + "/v1/users/me/delivery-endpoints", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(deliveryEndpoint)
        })
            .then(function (response) { return response.json; })
            .then(function (endpoint) {
            var _a;
            _this.savedDeliveryEndpoints = new SavedDeliveryEndpoints(Object.assign({}, _this.savedDeliveryEndpoints.deliveryEndpoints, (_a = {},
                _a[driverSpec.name] = endpoint,
                _a)));
            _this.syncEndpointsToStore();
            console.log('returning endpoint', endpoint);
            return endpoint;
        });
    };
    MessagingPipelineDriverHost.prototype.syncEndpointsToStore = function () {
        if (this.kvStore === undefined) {
            return;
        }
        this.kvStore
            .setItem(MessagingPipelineDriverHost.StoreKeys.SavedDeliveryEndpoints, this.savedDeliveryEndpoints)
            .catch(function (e) { return console.warn('Error syncing delivery endpoints to storage', e); });
    };
    MessagingPipelineDriverHost.prototype.generateStatelessPipelineSink = function (driverSpec) {
        var _this = this;
        return {
            received: function (payload) {
                _this.consumeNewPayload(driverSpec, payload);
            }
        };
    };
    MessagingPipelineDriverHost.prototype.generatePipelineSink = function (driverSpec) {
        var _this = this;
        return {
            received: function (payload) {
                _this.consumeNewPayload(driverSpec, payload);
            },
            endpointInvalidated: function (deliveryEndpoint) {
                _this.invalidateEndpoint(driverSpec, deliveryEndpoint);
            },
            authorizedUserUnavailable: noOp,
            statusUpdate: noOp
        };
    };
    MessagingPipelineDriverHost.prototype.invalidateEndpoint = function (_, __) {
        throw new Error('');
    };
    MessagingPipelineDriverHost.prototype.consumeNewPayload = function (_, payload) {
        this.subscriptions.forEach(function (subscription) { return subscription(payload); });
    };
    // tslint:disable-next-line:variable-name
    MessagingPipelineDriverHost.StoreKeys = {
        SavedDeliveryEndpoints: 'savedDeliveryEndpoints'
    };
    return MessagingPipelineDriverHost;
}());

var StandardHeaders = {
    UserAuthorizationHeader: 'X-Issued-Mitter-User-Authorization',
    SudoUserAuthorizationHeader: 'X-Mitter-Sudo-User-Id',
    ApplicationIdHeader: 'X-Mitter-Application-Id',
    AccessKeyHeader: 'X-Mitter-Application-Access-Key',
    AccessKeyAuthorizationHeader: 'Authorization'
};

var UserAuthorizationInterceptor = /** @class */ (function () {
    function UserAuthorizationInterceptor(userAuthorizationFetcher, applicationId) {
        if (applicationId === void 0) { applicationId = undefined; }
        this.userAuthorizationFetcher = userAuthorizationFetcher;
        this.applicationId = applicationId;
    }
    UserAuthorizationInterceptor.prototype.getInterceptor = function () {
        var _this = this;
        return function (requestParams) {
            if (!(StandardHeaders.UserAuthorizationHeader in requestParams.headers)) {
                var userAuthorization = _this.userAuthorizationFetcher();
                if (userAuthorization !== undefined) {
                    requestParams.headers[StandardHeaders.UserAuthorizationHeader] = [
                        userAuthorization
                    ];
                }
                if (_this.applicationId !== undefined) {
                    requestParams.headers[StandardHeaders.ApplicationIdHeader] = [
                        _this.applicationId
                    ];
                }
            }
        };
    };
    return UserAuthorizationInterceptor;
}());

var FetchMode;
(function (FetchMode) {
    FetchMode[FetchMode["Lazy"] = 0] = "Lazy";
    FetchMode[FetchMode["Eager"] = 1] = "Eager";
})(FetchMode || (FetchMode = {}));
var MitterObject = /** @class */ (function () {
    function MitterObject() {
        this.mode = FetchMode.Lazy;
    }
    MitterObject.prototype.init = function (fetchCall, mode) {
        var _this = this;
        if (mode === void 0) { mode = FetchMode.Lazy; }
        this.fetchCall = fetchCall;
        this.mode = mode;
        if (mode === FetchMode.Eager) {
            fetchCall().then(function (ref) {
                _this._ref = ref;
            });
        }
    };
    MitterObject.prototype.sync = function () {
        var _this = this;
        return this.fetchCall().then(function (it) {
            _this.setRef(it);
            return it;
        });
    };
    MitterObject.prototype.setRef = function (ref) {
        this._ref = ref;
    };
    MitterObject.prototype.proxy = function (key) {
        var _this = this;
        if (this._ref !== undefined) {
            return Promise.resolve(this._ref[key]);
        }
        else {
            return (this.sync()
                // TODO. we probably need some deadlock prevention mechanism, this can ideally
                // keep on going on forever
                .then(function (it) {
                _this._ref = it;
                return _this._ref[key];
            }));
        }
    };
    return MitterObject;
}());

var MitterUser = /** @class */ (function (_super) {
    __extends$1(MitterUser, _super);
    function MitterUser(mitter, userId) {
        if (userId === void 0) { userId = undefined; }
        var _this = _super.call(this) || this;
        _this.mitter = mitter;
        if (userId === undefined) {
            _this._userId = 'me';
        }
        else {
            _this._userId = userId;
        }
        _this.usersClient = usersClientGenerator(_this.mitter);
        _this.channelsClient = channelsClientGenerator(_this.mitter);
        _super.prototype.init.call(_this, function () {
            return _this.usersClient
                .get("/v1/users/" + _this._userId)
                .then(function (x) { return x.data; });
        });
        return _this;
    }
    Object.defineProperty(MitterUser.prototype, "userId", {
        get: function () {
            return _super.prototype.proxy.call(this, 'userId');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MitterUser.prototype, "systemUser", {
        get: function () {
            return _super.prototype.proxy.call(this, 'systemUser');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MitterUser.prototype, "synthetic", {
        get: function () {
            return _super.prototype.proxy.call(this, 'synthetic');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MitterUser.prototype, "screenName", {
        get: function () {
            return _super.prototype.proxy.call(this, 'screenName');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MitterUser.prototype, "identifier", {
        get: function () {
            return _super.prototype.proxy.call(this, 'identifier');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MitterUser.prototype, "userLocators", {
        get: function () {
            return _super.prototype.proxy.call(this, 'userLocators');
        },
        enumerable: true,
        configurable: true
    });
    MitterUser.prototype.channels = function () {
        this.channelsClient
            .get("/v1/users/" + this._userId + "/channels")
            .then(function (x) { return x.data; });
    };
    return MitterUser;
}(MitterObject));

var MitterBase = /** @class */ (function () {
    function MitterBase() {
    }
    MitterBase.prototype.version = function () {
        return '0.5.0';
    };
    MitterBase.prototype.clients = function () {
        return new MitterClientSet(this);
    };
    return MitterBase;
}());
var Mitter = /** @class */ (function (_super) {
    __extends$1(Mitter, _super);
    function Mitter(kvStore, applicationId, mitterApiBaseUrl, onTokenExpireFunctions, mitterInstanceReady, pipelineDrivers, globalHostObject) {
        if (mitterApiBaseUrl === void 0) { mitterApiBaseUrl = MitterConstants.MitterApiUrl; }
        var _this = _super.call(this) || this;
        _this.kvStore = kvStore;
        _this.applicationId = applicationId;
        _this.mitterApiBaseUrl = mitterApiBaseUrl;
        _this.onTokenExpireFunctions = onTokenExpireFunctions;
        _this.cachedUserAuthorization = undefined;
        _this.cachedUserId = undefined;
        _this.mitterAxiosInterceptor = new MitterAxiosApiInterceptor(
        /* the application if */
        _this.applicationId, 
        /* The generic request interceptor to use */
        new UserAuthorizationInterceptor(function () { return _this.cachedUserAuthorization; }, _this.applicationId).getInterceptor(), 
        /* The base url for mitter apis */
        _this.mitterApiBaseUrl);
        _this.subscriptions = [];
        _this.onAuthAvailableSubscribers = [];
        _this.onPipelinesInitialized = statefulPromise();
        _this.messagingPipelineDriverHost = new MessagingPipelineDriverHost(pipelineDrivers, _this, kvStore, function (e) {
            if (e !== undefined) {
                _this.onPipelinesInitialized.reject(e);
            }
            else {
                _this.onPipelinesInitialized.resolve();
            }
        });
        _this.messagingPipelineDriverHost.subscribe(function (messagingPayload) {
            return _this.subscriptions.forEach(function (subscription) { return subscription(messagingPayload); });
        });
        globalHostObject._mitter_context = _this;
        return _this;
    }
    Mitter.prototype.userAuthorizationAvailable = function (onAuthAvailable) {
        this.onAuthAvailableSubscribers.push(onAuthAvailable);
    };
    Mitter.prototype.subscribeToPayload = function (subscription) {
        this.subscriptions.push(subscription);
    };
    Mitter.prototype.enableAxiosInterceptor = function (axiosInstance) {
        this.mitterAxiosInterceptor.enable(axiosInstance);
    };
    Mitter.prototype.disableAxiosInterceptor = function (axiosInstance) {
        this.mitterAxiosInterceptor.disable(axiosInstance);
    };
    Mitter.prototype.setUserAuthorization = function (authorizationToken) {
        if (authorizationToken.split('.').length === 3) {
            this.cachedUserId = JSON.parse(atob(authorizationToken.split('.')[1]))['userId'];
        }
        if (this.cachedUserAuthorization === authorizationToken) {
            return;
        }
        this.cachedUserAuthorization = authorizationToken;
        this.announceAuthorizationAvailable();
        this.kvStore
            .setItem(Mitter.StoreKey.UserAuthorizationToken, authorizationToken)
            .catch(function (err) {
            throw new Error("Error storing key " + err);
        });
    };
    Mitter.prototype.getUserAuthorization = function () {
        if (this.cachedUserAuthorization !== undefined) {
            return Promise.resolve(this.cachedUserAuthorization);
        }
        else {
            return this.kvStore.getItem(Mitter.StoreKey.UserAuthorizationToken);
        }
    };
    Mitter.prototype.setUserId = function (userId) {
        if (this.cachedUserId === userId)
            return Promise.resolve();
        return this.kvStore.setItem(Mitter.StoreKey.UserId, userId).catch(function (err) {
            throw new Error("Error storing userId " + err);
        });
    };
    Mitter.prototype.getUserId = function () {
        var _this = this;
        if (this.cachedUserId !== undefined) {
            return Promise.resolve(this.cachedUserId);
        }
        else {
            return this.kvStore.getItem(Mitter.StoreKey.UserId).then(function (userId) {
                if (userId === undefined) {
                    return _this._me().userId.then(function (fetchedUserId) {
                        return _this.setUserId(fetchedUserId).then(function () { return fetchedUserId; });
                    });
                }
                else {
                    return Promise.resolve(userId);
                }
            });
        }
    };
    Mitter.prototype.onPipelinesInit = function () {
        return this.onPipelinesInitialized;
    };
    // Smart-object values
    Mitter.prototype.me = function () {
        return {
            identifier: this.cachedUserId
        };
    };
    Mitter.prototype._me = function () {
        return new MitterUser(this);
    };
    Mitter.prototype.executeOnTokenExpireFunctions = function () {
        this.onTokenExpireFunctions.forEach(function (onTokenExpire) {
            onTokenExpire();
        });
    };
    Mitter.prototype.announceAuthorizationAvailable = function () {
        this.onAuthAvailableSubscribers.forEach(function (subscriber) { return subscriber(); });
    };
    // tslint:disable-next-line:variable-name
    Mitter.StoreKey = {
        UserAuthorizationToken: 'userAuthorizationToken',
        UserId: 'userId'
    };
    return Mitter;
}(MitterBase));

var PipelineStatus;
(function (PipelineStatus) {
    PipelineStatus[PipelineStatus["Connected"] = 0] = "Connected";
    PipelineStatus[PipelineStatus["Unavailable"] = 1] = "Unavailable";
    PipelineStatus[PipelineStatus["Disrupted"] = 2] = "Disrupted";
    PipelineStatus[PipelineStatus["ConnectionInProgress"] = 3] = "ConnectionInProgress";
})(PipelineStatus || (PipelineStatus = {}));

var DigestParts = /** @class */ (function () {
    function DigestParts(method, path, payloadMd5, contentType, nonce, date) {
        this.method = method;
        this.path = path;
        this.payloadMd5 = payloadMd5;
        this.contentType = contentType;
        this.nonce = nonce;
        this.date = date;
    }
    return DigestParts;
}());
var DigestGenerationArtifacts = /** @class */ (function () {
    function DigestGenerationArtifacts(nonce, date, authorizationHeader) {
        this.nonce = nonce;
        this.date = date;
        this.authorizationHeader = authorizationHeader;
    }
    return DigestGenerationArtifacts;
}());

function createCommonjsModule$1(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var global$1 = (typeof global !== "undefined" ? global :
            typeof self !== "undefined" ? self :
            typeof window !== "undefined" ? window : {});

// there's 3 implementations written in increasing order of efficiency

// 1 - no Set type is defined
function uniqNoSet(arr) {
	var ret = [];

	for (var i = 0; i < arr.length; i++) {
		if (ret.indexOf(arr[i]) === -1) {
			ret.push(arr[i]);
		}
	}

	return ret;
}

// 2 - a simple Set type is defined
function uniqSet(arr) {
	var seen = new Set();
	return arr.filter(function (el) {
		if (!seen.has(el)) {
			seen.add(el);
			return true;
		}
	});
}

// 3 - a standard Set type is defined and it has a forEach method
function uniqSetWithForEach(arr) {
	var ret = [];

	(new Set(arr)).forEach(function (el) {
		ret.push(el);
	});

	return ret;
}

// V8 currently has a broken implementation
// https://github.com/joyent/node/issues/8449
function doesForEachActuallyWork() {
	var ret = false;

	(new Set([true])).forEach(function (el) {
		ret = el;
	});

	return ret === true;
}

if ('Set' in global$1) {
	if (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {
		module.exports = uniqSetWithForEach;
	} else {
		module.exports = uniqSet;
	}
} else {
	module.exports = uniqNoSet;
}

var arrayUniq = /*#__PURE__*/Object.freeze({

});

var charset = createCommonjsModule$1(function (module, exports) {
function Charset() {
  this.chars = '';
}

Charset.prototype.setType = function(type) {
  var chars;
  
  var numbers    = '0123456789';
  var charsLower = 'abcdefghijklmnopqrstuvwxyz';
  var charsUpper = charsLower.toUpperCase();
  var hexChars   = 'abcdef';
  
  if (type === 'alphanumeric') {
    chars = numbers + charsLower + charsUpper;
  }
  else if (type === 'numeric') {
    chars = numbers;
  }
  else if (type === 'alphabetic') {
    chars = charsLower + charsUpper;
  }
  else if (type === 'hex') {
    chars = numbers + hexChars;
  }
  else {
    chars = type;
  }
  
  this.chars = chars;
};

Charset.prototype.removeUnreadable = function() {
  var unreadableChars = /[0OIl]/g;
  this.chars = this.chars.replace(unreadableChars, '');
};

Charset.prototype.setcapitalization = function(capitalization) {
  if (capitalization === 'uppercase') {
    this.chars = this.chars.toUpperCase();
  }
  else if (capitalization === 'lowercase') {
    this.chars = this.chars.toLowerCase();
  }
};

Charset.prototype.removeDuplicates = function() {
  var charMap = this.chars.split('');
  charMap = arrayUniq(charMap);
  this.chars = charMap.join('');
};

module.exports = exports = Charset;
});

function safeRandomBytes(length) {
  while (true) {
    try {
      return crypto.randomBytes(length);
    } catch(e) {
      continue;
    }
  }
}

var generate = function(options) {
  
  var charset$$1 = new charset();
  
  var length, string = '';
  
  // Handle options
  if (typeof options === 'object') {
    length = options.length || 32;
    
    if (options.charset) {
      charset$$1.setType(options.charset);
    }
    else {
      charset$$1.setType('alphanumeric');
    }
    
    if (options.capitalization) {
      charset$$1.setcapitalization(options.capitalization);
    }
    
    if (options.readable) {
      charset$$1.removeUnreadable();
    }
    
    charset$$1.removeDuplicates();
  }
  else if (typeof options === 'number') {
    length = options;
    charset$$1.setType('alphanumeric');
  }
  else {
    length = 32;
    charset$$1.setType('alphanumeric');
  }
  
  // Generate the string
  var charsLen = charset$$1.chars.length;
  var maxByte = 256 - (256 % charsLen);
  while (length > 0) {
    var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));
    for (var i = 0; i < buf.length && length > 0; i++) {
      var randomByte = buf.readUInt8(i);
      if (randomByte < maxByte) {
        string += charset$$1.chars.charAt(randomByte % charsLen);
        length--;
      }
    }
  }

  return string;
};

var randomstring = {
	generate: generate
};

var randomstring$1 = randomstring;

var AccessKeySigner = /** @class */ (function () {
    function AccessKeySigner(accessKey, accessSecret) {
        this.accessKey = accessKey;
        this.accessSecret = accessSecret;
    }
    AccessKeySigner.prototype.signRequest = function (digestParts) {
        var date = this.getDate(digestParts);
        var contentType = this.getContentType(digestParts);
        var nonce = this.getNonce(digestParts);
        var computePayload = [
            digestParts.method.toUpperCase(),
            contentType,
            digestParts.payloadMd5,
            date,
            digestParts.path,
            nonce
        ].join('\n');
        var digest = crypto
            .createHmac('SHA1', Buffer.from(this.accessSecret, 'base64'))
            .update(computePayload)
            .digest('base64');
        return new DigestGenerationArtifacts(nonce, date, "Auth " + this.accessKey + ":" + digest);
    };
    AccessKeySigner.prototype.getNonce = function (digestParts) {
        if (digestParts.nonce !== undefined) {
            return digestParts.nonce;
        }
        else {
            return randomstring$1.generate(32);
        }
    };
    AccessKeySigner.prototype.getContentType = function (digestParts) {
        if (digestParts.contentType !== undefined) {
            return digestParts.contentType;
        }
        else {
            return 'null';
        }
    };
    AccessKeySigner.prototype.getDate = function (digestParts) {
        if (digestParts.date !== undefined) {
            return digestParts.date;
        }
        else {
            return new Date().toUTCString();
        }
    };
    AccessKeySigner.Headers = {
        Nonce: 'Nonce',
        Date: 'Date',
        ContentMD5: 'Content-Md5',
        ContentType: 'Content-Type'
    };
    return AccessKeySigner;
}());

var AccessKeySigningInterceptor = /** @class */ (function () {
    function AccessKeySigningInterceptor(accessKeyCredentials) {
        this.accessKeyCredentials = accessKeyCredentials;
        this.accessKeySigner = new AccessKeySigner(accessKeyCredentials.accessKey, accessKeyCredentials.accessSecret);
    }
    AccessKeySigningInterceptor.prototype.getInterceptor = function () {
        var _this = this;
        return function (requestParams) {
            var payload = requestParams.data === null || requestParams.data === undefined
                ? ''
                : requestParams.data;
            var wirePayload = typeof payload === 'object' ? JSON.stringify(payload) : payload;
            var contentType = payload == ''
                ? AccessKeySigningInterceptor.BodyContainingMethods.indexOf(requestParams.method) === -1
                    ? 'null'
                    : 'application/json'
                : 'application/json';
            var payloadMd5 = crypto
                .createHash('md5')
                .update(wirePayload)
                .digest('base64');
            var digestParts = new DigestParts(requestParams.method, requestParams.path, payloadMd5, contentType);
            var digest = _this.accessKeySigner.signRequest(digestParts);
            requestParams.headers[StandardHeaders.AccessKeyHeader] = [
                _this.accessKeyCredentials.accessKey
            ];
            requestParams.headers[StandardHeaders.AccessKeyAuthorizationHeader] = [
                digest.authorizationHeader
            ];
            requestParams.headers[AccessKeySigner.Headers.Date] = [digest.date];
            requestParams.headers[AccessKeySigner.Headers.Nonce] = [digest.nonce];
            requestParams.headers[AccessKeySigner.Headers.ContentMD5] = [payloadMd5];
            if (!(contentType === null || contentType === undefined || contentType === 'null')) {
                requestParams.headers[AccessKeySigner.Headers.ContentType] = [contentType];
            }
            requestParams.data = wirePayload;
        };
    };
    AccessKeySigningInterceptor.BodyContainingMethods = ['put', 'post', 'patch'];
    return AccessKeySigningInterceptor;
}());

var AccessKeyApplicationCredentials = /** @class */ (function () {
    function AccessKeyApplicationCredentials(accessKey, accessSecret) {
        this.accessKey = accessKey;
        this.accessSecret = accessSecret;
    }
    return AccessKeyApplicationCredentials;
}());

var MitterNode = /** @class */ (function (_super) {
    __extends(MitterNode, _super);
    function MitterNode(applicationId, accessKey, mitterApiBaseUrl) {
        var _this = _super.call(this) || this;
        _this.applicationId = applicationId;
        _this.accessKey = accessKey;
        _this.mitterApiBaseUrl = mitterApiBaseUrl;
        _this.accessKeySigningInterceptor = new AccessKeySigningInterceptor(accessKey);
        return _this;
    }
    MitterNode.prototype.version = function () {
        return '0.5.0';
    };
    MitterNode.prototype.enableAxiosInterceptor = function (axiosInstance) {
        new MitterAxiosApiInterceptor(
        /* the application id */
        this.applicationId, 
        /* the default signing interceptor to use */
        this.accessKeySigningInterceptor.getInterceptor(), this.mitterApiBaseUrl).enable(axiosInstance);
    };
    return MitterNode;
}(MitterBase));
var Mitter$1 = {
    forNode: function (applicationId, accessKey, mitterApiBaseUrl) {
        if (mitterApiBaseUrl === void 0) { mitterApiBaseUrl = MitterConstants.MitterApiUrl; }
        return new MitterNode(applicationId, accessKey, mitterApiBaseUrl);
    }
};

exports.MitterNode = MitterNode;
exports.Mitter = Mitter$1;
exports.AccessKeyApplicationCredentials = AccessKeyApplicationCredentials;

module.exports = Object.assign({}, module.exports, exports)
//# sourceMappingURL=mitter-node.umd.js.map
