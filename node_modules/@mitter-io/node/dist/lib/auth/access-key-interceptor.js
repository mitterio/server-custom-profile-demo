"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@mitter-io/core");
var AccessKeySigner_1 = require("./AccessKeySigner");
var digest_objects_1 = require("./digest-objects");
var crypto_1 = require("crypto");
var AccessKeySigningInterceptor = /** @class */ (function () {
    function AccessKeySigningInterceptor(accessKeyCredentials) {
        this.accessKeyCredentials = accessKeyCredentials;
        this.accessKeySigner = new AccessKeySigner_1.default(accessKeyCredentials.accessKey, accessKeyCredentials.accessSecret);
    }
    AccessKeySigningInterceptor.prototype.getInterceptor = function () {
        var _this = this;
        return function (requestParams) {
            var payload = requestParams.data === null || requestParams.data === undefined
                ? ''
                : requestParams.data;
            var wirePayload = typeof payload === 'object' ? JSON.stringify(payload) : payload;
            var contentType = payload == ''
                ? AccessKeySigningInterceptor.BodyContainingMethods.indexOf(requestParams.method) === -1
                    ? 'null'
                    : 'application/json'
                : 'application/json';
            var payloadMd5 = crypto_1.default
                .createHash('md5')
                .update(wirePayload)
                .digest('base64');
            var digestParts = new digest_objects_1.DigestParts(requestParams.method, requestParams.path, payloadMd5, contentType);
            var digest = _this.accessKeySigner.signRequest(digestParts);
            requestParams.headers[core_1.StandardHeaders.AccessKeyHeader] = [
                _this.accessKeyCredentials.accessKey
            ];
            requestParams.headers[core_1.StandardHeaders.AccessKeyAuthorizationHeader] = [
                digest.authorizationHeader
            ];
            requestParams.headers[AccessKeySigner_1.default.Headers.Date] = [digest.date];
            requestParams.headers[AccessKeySigner_1.default.Headers.Nonce] = [digest.nonce];
            requestParams.headers[AccessKeySigner_1.default.Headers.ContentMD5] = [payloadMd5];
            if (!(contentType === null || contentType === undefined || contentType === 'null')) {
                requestParams.headers[AccessKeySigner_1.default.Headers.ContentType] = [contentType];
            }
            requestParams.data = wirePayload;
        };
    };
    AccessKeySigningInterceptor.BodyContainingMethods = ['put', 'post', 'patch'];
    return AccessKeySigningInterceptor;
}());
exports.AccessKeySigningInterceptor = AccessKeySigningInterceptor;
//# sourceMappingURL=access-key-interceptor.js.map